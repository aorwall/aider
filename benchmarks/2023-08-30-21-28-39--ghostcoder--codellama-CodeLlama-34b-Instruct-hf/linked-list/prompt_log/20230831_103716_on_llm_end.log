method: on_llm_end [2023-08-31 10:37:16]
llm_output: null
prompt:
 

[PYTHON]
class Node:
    def __init__(self, value, succeeding=None, previous=None):
        self.value = value
        self.succeeding = succeeding
        self.previous = previous


class LinkedList:
    def __init__(self):
        self.head = None

    def push(self, value):
        node = Node(value, self.head)
        self.head = node

    def pop(self):
        if self.head is None:
            raise IndexError("List is empty")
        else:
            value = self.head.value
            self.head = self.head.succeeding
            return value


    def shift(self):
        if self.head is None:
            raise IndexError("List is empty")
        else:
            value = self.head.value
            self.head = self.head.succeeding
            return value


    def count(self):
        count = 0
        current = self.head
        while current is not None:
            count += 1
            current = current.succeeding
        return count


    def delete(self, value):
        if self.head is None:
            raise ValueError("Value not found")
        else:
            current = self.head
            previous = None
            while current is not None:
                if current.value == value:
                    if previous is None:
                    self.head = current.succeeding
                else:
                    previous.succeeding = current.succeeding
                break
            else:
                previous = current
                current = current.succeeding


            if current is None:
                raise ValueError("Value not found")

            else:
                count = 0
                current = self.head
                while current is not None:
                    count += 1
                    current = current.succeeding
                return count
[/PYTHON]

Explanation:


The code above is a Python implementation of a linked list data structure. It has the following methods:


* `push`: adds a new node to the head of the list with the given value
* `pop`: removes and returns the value of the head node
* `shift`: removes and returns the value of the head node
* `count`: returns the number of nodes in the list
* `delete`: removes the first occurrence of the given value


The `Node` class is a nested class within the `LinkedList` class, it represents a node in the linked list, it has three attributes:


* `value`: the value stored in the node
* `succeeding`: reference to the next node in the list
* `previous`: reference to the previous node in the list

The `LinkedList` class has four attributes:

* `head`: reference to the head node of the list
* `count`: number of nodes in the list


The methods are:

* `push`: adds a new node to the head of the list with the given value
* `pop`: removes and returns the value of the head node
* `shift`: removes and returns the value of the head node
* `count`: returns the number of nodes in the list
* `delete`: removes the first occurrence of the given value


The `push` method creates a new node with the given value and sets it as the new head of the list.
The `pop` method removes the head node and returns its value, if the list is empty it raises an `IndexError`.
The `shift` method removes the head node and returns its value, if the list is empty it raises an `IndexError`.
The `count` method returns the number of nodes in the list.
The `delete` method removes the first occurrence of the given value and returns the number of nodes left in the list, if the value is not found it raises a `ValueError`.

It is important to note that this implementation is not thread-safe, and should not be used in a multi-threaded environment without proper synchronization.
---
