[
  {
    "items": [
      {
        "type": "file",
        "content": "",
        "language": "pyton",
        "file_path": "rest_api.py",
        "readonly": false
      },
      {
        "type": "text",
        "text": "# Instructions\n\nImplement a RESTful API for tracking IOUs.\n\nFour roommates have a habit of borrowing money from each other frequently, and have trouble remembering who owes whom, and how much.\n\nYour task is to implement a simple [RESTful API][restful-wikipedia] that receives [IOU][iou]s as POST requests, and can deliver specified summary information via GET requests.\n\n## API Specification\n\n### User object\n\n```json\n{\n  \"name\": \"Adam\",\n  \"owes\": {\n    \"Bob\": 12.0,\n    \"Chuck\": 4.0,\n    \"Dan\": 9.5\n  },\n  \"owed_by\": {\n    \"Bob\": 6.5,\n    \"Dan\": 2.75,\n  },\n  \"balance\": \"<(total owed by other users) - (total owed to other users)>\"\n}\n```\n\n### Methods\n\n| Description | HTTP Method | URL | Payload Format | Response w/o Payload | Response w/ Payload |\n| --- | --- | --- | --- | --- | --- |\n| List of user information | GET | /users | `{\"users\":[\"Adam\",\"Bob\"]}` | `{\"users\":<List of all User objects>}` | `{\"users\":<List of User objects for <users> (sorted by name)}` |\n| Create user | POST | /add | `{\"user\":<name of new user (unique)>}` | N/A | `<User object for new user>` |\n| Create IOU | POST | /iou | `{\"lender\":<name of lender>,\"borrower\":<name of borrower>,\"amount\":5.25}` | N/A | `{\"users\":<updated User objects for <lender> and <borrower> (sorted by name)>}` |\n\n## Other Resources\n\n- [REST API Tutorial][restfulapi]\n- Example RESTful APIs\n  - [GitHub][github-rest]\n  - [Reddit][reddit-rest]\n\n[restful-wikipedia]: https://en.wikipedia.org/wiki/Representational_state_transfer\n[iou]: https://en.wikipedia.org/wiki/IOU\n[github-rest]: https://developer.github.com/v3/\n[reddit-rest]: https://www.reddit.com/dev/api/\n[restfulapi]: https://restfulapi.net/\n\n####\n\nUse the above instructions to modify the supplied files: rest_api.py\nKeep and implement the existing function or class stubs, they will be called from unit tests.\nDo not implement or change any unit tests.\nOnly use standard python libraries, don't suggest installing any packages.\n",
        "need_input": false
      }
    ],
    "sender": "Human",
    "summary": null,
    "stats": null,
    "commit_id": null,
    "discarded": false
  },
  {
    "items": [
      {
        "type": "updated_file",
        "content": "class RestAPI:\n    def __init__(self, database=None):\n        self.database = {}\n\n    def get(self, url, payload=None):\n        if url == \"/users\":\n            users = sorted([{**user} for user in self.database.values()])\n            return {\"users\": users}, 200\n        elif url == \"/add\" and \"user\" in payload:\n            name = payload[\"user\"]\n            if name in self.database:\n                return None, 409\n            else:\n                self.database[name] = {\n                    \"name\": name,\n                    \"owes\": {},\n                    \"owed_by\": {},\n                    \"balance\": 0\n                }\n                return {**self.database[name]}\n        else:\n            return None, 404\n\n    def post(self, url, payload=None):\n        if url == \"/iou\" and all(key in payload for key in [\"lender\", \"borrower\", \"amount\"]):\n            lender = payload[\"lender\"]\n            borrower = payload[\"borrower\"]\n            amount = float(payload[\"amount\"])\n\n            if lender not in self.database or borrower not in self.database:\n                return None, 404\n\n            # Update lender and borrower's records\n            self.database[lender][\"owes\"][borrower] = self.database[lender].get(\"owes\", {}).get(borrower, 0) + amount\n            self.database[borrower][\"owed_by\"][lender] = self.database[borrower].get(\"owed_by\", {}).get(lender, 0) + amount\n\n            # Recalculate balance\n            self.database[lender][\"balance\"] -= amount\n            self.database[borrower][\"balance\"] += amount\n\n            users = sorted([{**user} for user in [self.database[lender], self.database[borrower]]])\n            return {\"users\": users}, 201\n        else:\n            return None, 400\n",
        "language": null,
        "file_path": "rest_api.py",
        "readonly": false,
        "error": null,
        "invalid": false
      }
    ],
    "sender": "AI",
    "summary": null,
    "stats": null,
    "commit_id": null,
    "discarded": false
  },
  {
    "items": [
      {
        "type": "file",
        "content": "",
        "language": "pyton",
        "file_path": "rest_api.py",
        "readonly": false
      },
      {
        "type": "text",
        "text": "EEEEEEEEE\n====\nERROR: test_add_user (rest_api_test.RestApiTest)\n----\nTraceback (most recent call last):\n  File \"rest-api/rest_api_test.py\", line 28, in test_add_user\n    self.assertDictEqual(json.loads(response), expected)\n  File \"/opt/conda/lib/python3.10/json/__init__.py\", line 339, in loads\n    raise TypeError(f'the JSON object must be str, bytes or bytearray, '\nTypeError: the JSON object must be str, bytes or bytearray, not tuple\n\n====\nERROR: test_borrower_has_negative_balance (rest_api_test.RestApiTest)\n----\nTraceback (most recent call last):\n  File \"rest-api/rest_api_test.py\", line 73, in test_borrower_has_negative_balance\n    response = api.post(\"/iou\", payload)\n  File \"rest-api/rest_api.py\", line 26, in post\n    lender = payload[\"lender\"]\nTypeError: string indices must be integers\n\n====\nERROR: test_both_users_have_0_balance (rest_api_test.RestApiTest)\n----\nTraceback (most recent call last):\n  File \"rest-api/rest_api_test.py\", line 54, in test_both_users_have_0_balance\n    response = api.post(\"/iou\", payload)\n  File \"rest-api/rest_api.py\", line 26, in post\n    lender = payload[\"lender\"]\nTypeError: string indices must be integers\n\n====\nERROR: test_get_single_user (rest_api_test.RestApiTest)\n----\nTraceback (most recent call last):\n  File \"rest-api/rest_api_test.py\", line 43, in test_get_single_user\n    self.assertDictEqual(json.loads(response), expected)\n  File \"/opt/conda/lib/python3.10/json/__init__.py\", line 339, in loads\n    raise TypeError(f'the JSON object must be str, bytes or bytearray, '\nTypeError: the JSON object must be str, bytes or bytearray, not tuple\n\n====\nERROR: test_lender_has_negative_balance (rest_api_test.RestApiTest)\n----\nTraceback (most recent call last):\n  File \"rest-api/rest_api_test.py\", line 97, in test_lender_has_negative_balance\n    response = api.post(\"/iou\", payload)\n  File \"rest-api/rest_api.py\", line 26, in post\n    lender = payload[\"lender\"]\nTypeError: string indices must be integers\n####\n\nSee the testing errors above.\nThe tests are correct.\nFix the code in rest_api.py to resolve the errors.\n",
        "need_input": false
      }
    ],
    "sender": "Human",
    "summary": null,
    "stats": null,
    "commit_id": null,
    "discarded": false
  },
  {
    "items": [
      {
        "type": "updated_file",
        "content": "import json\nfrom collections import defaultdict\n\nclass RestAPI:\n    def __init__(self, database=None):\n        self.database = {} if database is None else database\n\n    def get(self, url, payload=None):\n        if url == \"/users\":\n            users = sorted([{**user} for user in self.database.values()])\n            return {\"users\": users}, 200\n        elif url == \"/add\" and \"user\" in payload:\n            name = payload[\"user\"]\n            if name in self.database:\n                return None, 409\n            else:\n                self.database[name] = {\n                    \"name\": name,\n                    \"owes\": {},\n                    \"owed_by\": {},\n                    \"balance\": 0\n                }\n                return {**self.database[name]}\n        else:\n            return None, 404\n\n    def post(self, url, payload=None):\n        try:\n            payload = json.loads(payload)\n        except (json.JSONDecodeError, TypeError):\n            return None, 400\n\n        if url == \"/iou\" and all(key in payload for key in [\"lender\", \"borrower\", \"amount\"]):\n            lender = payload[\"lender\"]\n            borrower = payload[\"borrower\"]\n            amount = float(payload[\"amount\"])\n\n            if lender not in self.database or borrower not in self.database:\n                return None, 404\n\n            # Update lender and borrower's records\n            self.database[lender][\"owes\"][borrower] = self.database[lender].get(\"owes\", {}).get(borrower, 0) + amount\n            self.database[borrower][\"owed_by\"][lender] = self.database[borrower].get(\"owed_by\", {}).get(lender, 0) + amount\n\n            # Recalculate balance\n            self.database[lender][\"balance\"] -= amount\n            self.database[borrower][\"balance\"] += amount\n\n            users = sorted([{**user} for user in [self.database[lender], self.database[borrower]]])\n            return {\"users\": users}, 201\n        else:\n            return None, 400",
        "language": null,
        "file_path": "rest_api.py",
        "readonly": false,
        "error": null,
        "invalid": false
      }
    ],
    "sender": "AI",
    "summary": null,
    "stats": null,
    "commit_id": null,
    "discarded": false
  }
]