method: on_llm_end [2023-08-20 18:33:38]
llm_output: {"token_usage": {"prompt_tokens": 919, "completion_tokens": 474, "total_tokens": 1393}, "model_name": "gpt-4"}
prompt:
To solve this problem, we need to create a dictionary that maps each 3x4 grid representation of a number to its corresponding digit. Then, we can iterate over the input grid in chunks of 3 columns and 4 rows, converting each chunk to a digit using our dictionary. If a chunk doesn't match any digit, we replace it with a '?'. We also need to handle the case where the input grid is not a valid size by raising a ValueError.

Here's how we can implement this:

Filepath: ocr_numbers.py
```python
def convert(input_grid):
    # Define the 3x4 grid representation of each digit
    digits = {
        " _ \n| |\n|_|\n   ": "0",
        "   \n  |\n  |\n   ": "1",
        " _ \n _|\n|_ \n   ": "2",
        " _ \n _|\n _|\n   ": "3",
        "   \n|_|\n  |\n   ": "4",
        " _ \n|_ \n _|\n   ": "5",
        " _ \n|_ \n|_|\n   ": "6",
        " _ \n  |\n  |\n   ": "7",
        " _ \n|_|\n|_|\n   ": "8",
        " _ \n|_|\n _|\n   ": "9",
    }

    # Check if the input grid is a valid size
    if len(input_grid) % 4 != 0 or any(len(row) % 3 != 0 for row in input_grid):
        raise ValueError("Input grid is not a valid size")

    # Split the input grid into lines
    lines = [input_grid[i:i+4] for i in range(0, len(input_grid), 4)]

    # Convert each line to a number
    numbers = []
    for line in lines:
        number = ""
        for i in range(0, len(line[0]), 3):
            chunk = "\n".join(row[i:i+3] for row in line)
            number += digits.get(chunk, "?")
        numbers.append(number)

    return ",".join(numbers)
```
---
