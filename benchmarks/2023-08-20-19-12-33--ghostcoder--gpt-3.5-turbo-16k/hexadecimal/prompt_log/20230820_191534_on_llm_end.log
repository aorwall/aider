method: on_llm_end [2023-08-20 19:15:34]
llm_output: {"token_usage": {"prompt_tokens": 324, "completion_tokens": 311, "total_tokens": 635}, "model_name": "gpt-3.5-turbo-16k"}
prompt:
Filepath: hexadecimal.py
```python
def hexa(hex_string):
    hex_dict = {'0': 0, '1': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9, 'a': 10, 'b': 11, 'c': 12, 'd': 13, 'e': 14, 'f': 15}
    decimal = 0
    power = len(hex_string) - 1

    for digit in hex_string:
        if digit.lower() not in hex_dict:
            return None
        decimal += hex_dict[digit.lower()] * (16 ** power)
        power -= 1

    return decimal
```

Explanation:
- I added a dictionary `hex_dict` to map each hexadecimal digit to its decimal value.
- I initialized `decimal` to 0 and `power` to the length of the hex_string minus 1.
- I loop through each digit in the hex_string.
- I check if the digit is a valid hexadecimal digit by checking if it exists in the hex_dict. If not, I return None.
- I calculate the decimal value of the digit by multiplying its decimal equivalent from the hex_dict with 16 raised to the power.
- I decrement the power by 1 for each digit.
- Finally, I return the decimal value.
---
