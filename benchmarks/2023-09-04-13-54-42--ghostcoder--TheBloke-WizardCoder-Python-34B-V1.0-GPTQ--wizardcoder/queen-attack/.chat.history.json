[
  {
    "items": [
      {
        "type": "text",
        "text": "# Instructions\n\nGiven the position of two queens on a chess board, indicate whether or not they are positioned so that they can attack each other.\n\nIn the game of chess, a queen can attack pieces which are on the same row, column, or diagonal.\n\nA chessboard can be represented by an 8 by 8 array.\n\nSo if you are told the white queen is at `c5` (zero-indexed at column 2, row 3) and the black queen at `f2` (zero-indexed at column 5, row 6), then you know that the set-up is like so:\n\n```text\n  a b c d e f g h\n8 _ _ _ _ _ _ _ _ 8\n7 _ _ _ _ _ _ _ _ 7\n6 _ _ _ _ _ _ _ _ 6\n5 _ _ W _ _ _ _ _ 5\n4 _ _ _ _ _ _ _ _ 4\n3 _ _ _ _ _ _ _ _ 3\n2 _ _ _ _ _ B _ _ 2\n1 _ _ _ _ _ _ _ _ 1\n  a b c d e f g h\n```\n\nYou are also able to answer whether the queens can attack each other.\nIn this case, that answer would be yes, they can, because both pieces share a diagonal.\n# Instructions append\n\n## Exception messages\n\nSometimes it is necessary to [raise an exception](https://docs.python.org/3/tutorial/errors.html#raising-exceptions). When you do this, you should always include a **meaningful error message** to indicate what the source of the error is. This makes your code more readable and helps significantly with debugging. For situations where you know that the error source will be a certain type, you can choose to raise one of the [built in error types](https://docs.python.org/3/library/exceptions.html#base-classes), but should still include a meaningful message.\n\nThis particular exercise requires that you use the [raise statement](https://docs.python.org/3/reference/simple_stmts.html#the-raise-statement) to \"throw\" `ValueErrors` if the `Queen` constructor is passed numbers that are negative, or numbers that are not a valid row or column.  The tests will only pass if you both `raise` the `exception` and include a message with it. You also should `raise` a `ValueError` if both the queens passed to the `can_attack()` method are on the same location.\n\nTo raise a `ValueError` with a message, write the message as an argument to the `exception` type:\n\n```python\n# if the row parameter is negative\nraise ValueError(\"row not positive\")\n\n# if the row parameter is not on the defined board\nraise ValueError(\"row not on board\")\n\n# if the column parameter is negative\nraise ValueError(\"column not positive\")\n\n# if the column parameter is not on the defined board\nraise ValueError(\"column not on board\")\n\n# if both the queens are on the same location\nraise ValueError(\"Invalid queen position: both queens in the same square\")\n```\n\n####\n\nUse the above instructions to modify the supplied files: queen_attack.py\nKeep and implement the existing function or class stubs, they will be called from existing unit tests.\nOnly use standard python libraries, don't suggest installing any packages.\n",
        "need_input": false
      },
      {
        "type": "file",
        "content": "",
        "language": "python",
        "file_path": "queen_attack.py",
        "readonly": false
      }
    ],
    "sender": "Human",
    "summary": null,
    "stats": null,
    "commit_id": null,
    "discarded": false
  },
  {
    "items": [
      {
        "type": "updated_file",
        "content": "class Queen:\n    def __init__(self, row, column):\n        if row < 0:\n            raise ValueError(\"Row not positive\")\n        elif row > 7:\n            raise ValueError(\"Row not on board\")\n\n        if column < 0:\n            raise ValueError(\"Column not positive\")\n        elif column > 7:\n            raise ValueError(\"Column not on board\")\n\n        self.row = row\n        self.column = column\n\n    def can_attack(self, another_queen):\n        if self.row == another_queen.row and self.column == another_queen.column:\n            raise ValueError(\"Invalid queen position: both queens in the same square\")\n\n        # Check diagonals\n        delta_x = abs(self.row - another_queen.row)\n        delta_y = abs(self.column - another_queen.column)\n\n        if delta_x == delta_y:\n            return True\n\n        return False\n",
        "language": "python",
        "file_path": "queen_attack.py",
        "readonly": false,
        "error": null,
        "invalid": false
      }
    ],
    "sender": "AI",
    "summary": null,
    "stats": null,
    "commit_id": null,
    "discarded": false
  },
  {
    "items": [
      {
        "type": "text",
        "text": "..FF....FFFF..\n====\nFAIL: test_can_attack_on_same_column (queen_attack_test.QueenAttackTest.test_can_attack_on_same_column)\n----\nTraceback (most recent call last):\n  File \"queen-attack/queen_attack_test.py\", line 49, in test_can_attack_on_same_column\n    self.assertIs(Queen(4, 5).can_attack(Queen(2, 5)), True)\nAssertionError: False is not True\n\n====\nFAIL: test_can_attack_on_same_row (queen_attack_test.QueenAttackTest.test_can_attack_on_same_row)\n----\nTraceback (most recent call last):\n  File \"queen-attack/queen_attack_test.py\", line 46, in test_can_attack_on_same_row\n    self.assertIs(Queen(2, 4).can_attack(Queen(2, 6)), True)\nAssertionError: False is not True\n\n====\nFAIL: test_queen_must_have_column_on_board (queen_attack_test.QueenAttackTest.test_queen_must_have_column_on_board)\n----\nTraceback (most recent call last):\n  File \"queen-attack/queen_attack_test.py\", line 39, in test_queen_must_have_column_on_board\n    self.assertEqual(err.exception.args[0], \"column not on board\")\nAssertionError: 'Column not on board' != 'column not on board'\n- Column not on board\n? ^\n+ column not on board\n? ^\n\n\n====\nFAIL: test_queen_must_have_positive_column (queen_attack_test.QueenAttackTest.test_queen_must_have_positive_column)\n----\nTraceback (most recent call last):\n  File \"queen-attack/queen_attack_test.py\", line 33, in test_queen_must_have_positive_column\n    self.assertEqual(err.exception.args[0], \"column not positive\")\nAssertionError: 'Column not positive' != 'column not positive'\n- Column not positive\n? ^\n+ column not positive\n? ^\n\n\n====\nFAIL: test_queen_must_have_positive_row (queen_attack_test.QueenAttackTest.test_queen_must_have_positive_row)\n----\nTraceback (most recent call last):\n  File \"queen-attack/queen_attack_test.py\", line 21, in test_queen_must_have_positive_row\n    self.assertEqual(err.exception.args[0], \"row not positive\")\nAssertionError: 'Row not positive' != 'row not positive'\n####\n\nSee the testing errors above.\nThe tests are correct.\nFix the code in queen_attack.py to resolve the errors.\n",
        "need_input": false
      },
      {
        "type": "file",
        "content": "",
        "language": "python",
        "file_path": "queen_attack.py",
        "readonly": false
      }
    ],
    "sender": "Human",
    "summary": null,
    "stats": null,
    "commit_id": null,
    "discarded": false
  },
  {
    "items": [
      {
        "type": "updated_file",
        "content": "class Queen:\n    def __init__(self, row, column):\n        if row <= 0 or row > 7:\n            raise ValueError(\"Row not on board\")\n\n        if column <= 0 or column > 7:\n            raise ValueError(\"Column not on board\")\n\n        self.row = row\n        self.column = column\n\n    def can_attack(self, another_queen):\n        if self.row == another_queen.row and self.column == another_queen.column:\n            raise ValueError(\"Invalid queen position: both queens in the same square\")\n\n        # Check diagonals\n        delta_x = abs(self.row - another_queen.row)\n        delta_y = abs(self.column - another_queen.column)\n\n        if delta_x == delta_y:\n            return True\n\n        return False\n",
        "language": "python",
        "file_path": "queen_attack.py",
        "readonly": false,
        "error": null,
        "invalid": false
      }
    ],
    "sender": "AI",
    "summary": null,
    "stats": null,
    "commit_id": null,
    "discarded": false
  }
]