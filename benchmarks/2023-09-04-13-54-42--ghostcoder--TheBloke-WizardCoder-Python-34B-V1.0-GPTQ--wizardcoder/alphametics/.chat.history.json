[
  {
    "items": [
      {
        "type": "text",
        "text": "# Instructions\n\nWrite a function to solve alphametics puzzles.\n\n[Alphametics][alphametics] is a puzzle where letters in words are replaced with numbers.\n\nFor example `SEND + MORE = MONEY`:\n\n```text\n  S E N D\n  M O R E +\n-----------\nM O N E Y\n```\n\nReplacing these with valid numbers gives:\n\n```text\n  9 5 6 7\n  1 0 8 5 +\n-----------\n1 0 6 5 2\n```\n\nThis is correct because every letter is replaced by a different number and the words, translated into numbers, then make a valid sum.\n\nEach letter must represent a different digit, and the leading digit of a multi-digit number must not be zero.\n\nWrite a function to solve alphametics puzzles.\n\n[alphametics]: https://en.wikipedia.org/wiki/Alphametics\n\n####\n\nUse the above instructions to modify the supplied files: alphametics.py\nKeep and implement the existing function or class stubs, they will be called from existing unit tests.\nOnly use standard python libraries, don't suggest installing any packages.\n",
        "need_input": false
      },
      {
        "type": "file",
        "content": "",
        "language": "python",
        "file_path": "alphametics.py",
        "readonly": false
      }
    ],
    "sender": "Human",
    "summary": null,
    "stats": null,
    "commit_id": null,
    "discarded": false
  },
  {
    "items": [
      {
        "type": "updated_file",
        "content": "import re\nfrom itertools import permutations\n\ndef solve(puzzle):\n    words = re.findall('[A-Z]+', puzzle)\n    unique_letters = set(''.join(words))\n\n    def get_number(word):\n        perm = list(set(permutations([str(i) for i in range(1, 10)])))\n\n        for p in perm:\n            mapping = dict(zip(unique_letters, p))\n\n            if ''.join([mapping[c] for c in word]) != '0':\n                yield int(''.join([mapping[c] for c in word]))\n\n    solutions = []\n\n    for nums in zip(*map(get_number, words)):\n        equation = puzzle.translate(str.maketrans({k: str(v) for k, v in zip(unique_letters, nums)}))\n        try:\n            left, right = map(int, equation.split())\n        except ValueError:\n            continue\n\n        if left + right == int(equation.split()[-1]):\n            solutions.append((left, right, int(equation.split()[-1])))\n\n    return solutions\n",
        "language": "python",
        "file_path": "alphametics.py",
        "readonly": false,
        "error": null,
        "invalid": false
      }
    ],
    "sender": "AI",
    "summary": null,
    "stats": null,
    "commit_id": null,
    "discarded": false
  },
  {
    "items": [
      {
        "type": "text",
        "text": "FFFFFEsFFF\n====\nERROR: test_puzzle_with_ten_letters (alphametics_test.AlphameticsTest.test_puzzle_with_ten_letters)\n----\nTraceback (most recent call last):\n  File \"alphametics/alphametics_test.py\", line 51, in test_puzzle_with_ten_letters\n    solve(\"AND + A + STRONG + OFFENSE + AS + A + GOOD == DEFENSE\"),\n    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"alphametics/alphametics.py\", line 19, in solve\n    for nums in zip(*map(get_number, words)):\n  File \"alphametics/alphametics.py\", line 14, in get_number\n    if ''.join([mapping[c] for c in word]) != '0':\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"alphametics/alphametics.py\", line 14, in <listcomp>\n    if ''.join([mapping[c] for c in word]) != '0':\n                ~~~~~~~^^^\nKeyError: 'S'\n\n====\nFAIL: test_leading_zero_solution_is_invalid (alphametics_test.AlphameticsTest.test_leading_zero_solution_is_invalid)\n----\nTraceback (most recent call last):\n  File \"alphametics/alphametics_test.py\", line 20, in test_leading_zero_solution_is_invalid\n    self.assertEqual(solve(\"ACA + DD == BD\"), None)\nAssertionError: [] != None\n\n====\nFAIL: test_puzzle_with_eight_letters (alphametics_test.AlphameticsTest.test_puzzle_with_eight_letters)\n----\nTraceback (most recent call last):\n  File \"alphametics/alphametics_test.py\", line 44, in test_puzzle_with_eight_letters\n    self.assertEqual(\nAssertionError: [] != {'S': 9, 'E': 5, 'N': 6, 'D': 7, 'M': 1, 'O': 0, 'R': 8, 'Y': 2}\n\n====\nFAIL: test_puzzle_with_four_letters (alphametics_test.AlphameticsTest.test_puzzle_with_four_letters)\n----\nTraceback (most recent call last):\n  File \"alphametics/alphametics_test.py\", line 29, in test_puzzle_with_four_letters\n    self.assertEqual(solve(\"AS + A == MOM\"), {\"A\": 9, \"S\": 2, \"M\": 1, \"O\": 0})\nAssertionError: [] != {'A': 9, 'S': 2, 'M': 1, 'O': 0}\n\n====\nFAIL: test_puzzle_with_seven_letters (alphametics_test.AlphameticsTest.test_puzzle_with_seven_letters)\n----\nTraceback (most recent call last):\n  File \"alphametics/alphametics_test.py\", line 38, in test_puzzle_with_seven_letters\n    self.assertEqual(\nAssertionError: [] != {'E': 4, 'G': 2, 'H': 5, 'I': 0, 'L': 1, 'S': 9, 'T': 7}\n\n####\n\nSee the testing errors above.\nThe tests are correct.\nFix the code in alphametics.py to resolve the errors.\n",
        "need_input": false
      },
      {
        "type": "file",
        "content": "",
        "language": "python",
        "file_path": "alphametics.py",
        "readonly": false
      }
    ],
    "sender": "Human",
    "summary": null,
    "stats": null,
    "commit_id": null,
    "discarded": false
  },
  {
    "items": [
      {
        "type": "updated_file",
        "content": "import re\nfrom itertools import permutations\n\ndef solve(puzzle):\n    words = re.findall('[A-Z]+', puzzle)\n    unique_letters = set(''.join(words))\n\n    def get_number(word):\n        perm = list(set(permutations([str(i) for i in range(1, 10)])))\n\n        for p in perm:\n            mapping = dict(zip(unique_letters, p))\n\n            if ''.join([mapping[c] for c in word]) != '0':\n                yield int(''.join([mapping[c] for c in word]))\n\n    solutions = []\n\n    for nums in zip(*map(get_number, words)):\n        equation = puzzle.translate(str.maketrans({k: str(v) for k, v in zip(unique_letters, nums)}))\n        try:\n            left, right = map(int, equation.split())\n        except ValueError:\n            continue\n\n        if left + right == int(equation.split()[-1]):\n            solutions.append({k: int(v) for k, v in zip(unique_letters, nums)})\n\n    return solutions or None\n",
        "language": "python",
        "file_path": "alphametics.py",
        "readonly": false,
        "error": null,
        "invalid": false
      }
    ],
    "sender": "AI",
    "summary": null,
    "stats": null,
    "commit_id": null,
    "discarded": false
  }
]