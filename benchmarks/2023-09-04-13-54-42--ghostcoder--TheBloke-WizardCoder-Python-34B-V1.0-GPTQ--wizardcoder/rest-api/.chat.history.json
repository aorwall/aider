[
  {
    "items": [
      {
        "type": "text",
        "text": "# Instructions\n\nImplement a RESTful API for tracking IOUs.\n\nFour roommates have a habit of borrowing money from each other frequently, and have trouble remembering who owes whom, and how much.\n\nYour task is to implement a simple [RESTful API][restful-wikipedia] that receives [IOU][iou]s as POST requests, and can deliver specified summary information via GET requests.\n\n## API Specification\n\n### User object\n\n```json\n{\n  \"name\": \"Adam\",\n  \"owes\": {\n    \"Bob\": 12.0,\n    \"Chuck\": 4.0,\n    \"Dan\": 9.5\n  },\n  \"owed_by\": {\n    \"Bob\": 6.5,\n    \"Dan\": 2.75,\n  },\n  \"balance\": \"<(total owed by other users) - (total owed to other users)>\"\n}\n```\n\n### Methods\n\n| Description | HTTP Method | URL | Payload Format | Response w/o Payload | Response w/ Payload |\n| --- | --- | --- | --- | --- | --- |\n| List of user information | GET | /users | `{\"users\":[\"Adam\",\"Bob\"]}` | `{\"users\":<List of all User objects>}` | `{\"users\":<List of User objects for <users> (sorted by name)}` |\n| Create user | POST | /add | `{\"user\":<name of new user (unique)>}` | N/A | `<User object for new user>` |\n| Create IOU | POST | /iou | `{\"lender\":<name of lender>,\"borrower\":<name of borrower>,\"amount\":5.25}` | N/A | `{\"users\":<updated User objects for <lender> and <borrower> (sorted by name)>}` |\n\n## Other Resources\n\n- [REST API Tutorial][restfulapi]\n- Example RESTful APIs\n  - [GitHub][github-rest]\n  - [Reddit][reddit-rest]\n\n[restful-wikipedia]: https://en.wikipedia.org/wiki/Representational_state_transfer\n[iou]: https://en.wikipedia.org/wiki/IOU\n[github-rest]: https://developer.github.com/v3/\n[reddit-rest]: https://www.reddit.com/dev/api/\n[restfulapi]: https://restfulapi.net/\n\n####\n\nUse the above instructions to modify the supplied files: rest_api.py\nKeep and implement the existing function or class stubs, they will be called from existing unit tests.\nOnly use standard python libraries, don't suggest installing any packages.\n",
        "need_input": false
      },
      {
        "type": "file",
        "content": "",
        "language": "python",
        "file_path": "rest_api.py",
        "readonly": false
      }
    ],
    "sender": "Human",
    "summary": null,
    "stats": null,
    "commit_id": null,
    "discarded": false
  },
  {
    "items": [
      {
        "type": "updated_file",
        "content": "import json\nfrom typing import Dict, Any\n\nclass User:\n    def __init__(self, name: str):\n        self.name = name\n        self.owes = {}\n        self.owed_by = {}\n        self.balance = 0\n\n    @property\n    def total_owed(self) -> float:\n        return sum(self.owes.values())\n\n    @property\n    def total_owed_to(self) -> float:\n        return sum(self.owed_by.values())\n\n    def update_balance(self):\n        self.balance = self.total_owed_to - self.total_owed\n\n    def add_debt(self, debtor: str, amount: float):\n        if debtor not in self.owed_by:\n            self.owed_by[debtor] = 0\n        self.owed_by[debtor] += amount\n        self.update_balance()\n\n    def add_credit(self, creditor: str, amount: float):\n        if creditor not in self.owes:\n            self.owes[creditor] = 0\n        self.owes[creditor] += amount\n        self.update_balance()\n\nclass Database:\n    def __init__(self):\n        self._users = {}\n\n    def create_user(self, name: str) -> User:\n        if name in self._users:\n            raise ValueError(f\"User '{name}' already exists.\")\n        user = User(name)\n        self._users[name] = user\n        return user\n\n    def list_users(self, names: list[str]) -> dict[str, User]:\n        sorted_names = sorted(names)\n        return {name: self._users[name] for name in sorted_names}\n\n    def add_iou(self, lender: str, borrower: str, amount: float):\n        if lender not in self._users:\n            self.create_user(lender)\n        if borrower not in self._users:\n            self.create_user(borrower)\n\n        self._users[lender].add_credit(borrower, amount)\n        self._users[borrower].add_debt(lender, amount)\n\nclass RestAPI:\n    def __init__(self, database: Database = None):\n        self._database = database or Database()\n\n    def _serialize_user(self, user: User) -> Dict[str, Any]:\n        return {\n            'name': user.name,\n            'owes': user.owes,\n            'owed_by': user.owed_by,\n            'balance': round(user.balance, 2),\n        }\n\n    def get(self, url: str, payload: dict[str, Any] = None) -> dict[str, Any]:\n        if url == '/users':\n            users = self._database.list_users(payload['users'])\n            return {'users': [self._serialize_user(u) for u in users.values()]}\n        else:\n            raise NotImplementedError('Invalid endpoint')\n\n    def post(self, url: str, payload: dict[str, Any] = None) -> dict[str, Any]:\n        if url == '/add':\n            user = self._database.create_user(payload['user'])\n            return {'users': [self._serialize_user(user)]}\n        elif url == '/iou':\n            self._database.add_iou(payload['lender'], payload['borrower'], payload['amount'])\n            updated_users = self._database.list_users([payload['lender'], payload['borrower']])\n            return {'users': [self._serialize_user(u) for u in updated_users.values()]}\n        else:\n            raise NotImplementedError('Invalid endpoint')\n",
        "language": "python",
        "file_path": "rest_api.py",
        "readonly": false,
        "error": null,
        "invalid": false
      }
    ],
    "sender": "AI",
    "summary": null,
    "stats": null,
    "commit_id": null,
    "discarded": false
  },
  {
    "items": [
      {
        "type": "text",
        "text": "EEEEEEEEE\n====\nERROR: test_add_user (rest_api_test.RestApiTest.test_add_user)\n----\nTraceback (most recent call last):\n  File \"rest-api/rest_api_test.py\", line 26, in test_add_user\n    response = api.post(\"/add\", payload)\n               ^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"rest-api/rest_api.py\", line 79, in post\n    user = self._database.create_user(payload['user'])\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^\nAttributeError: 'dict' object has no attribute 'create_user'\n\n====\nERROR: test_borrower_has_negative_balance (rest_api_test.RestApiTest.test_borrower_has_negative_balance)\n----\nTraceback (most recent call last):\n  File \"rest-api/rest_api_test.py\", line 73, in test_borrower_has_negative_balance\n    response = api.post(\"/iou\", payload)\n               ^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"rest-api/rest_api.py\", line 82, in post\n    self._database.add_iou(payload['lender'], payload['borrower'], payload['amount'])\n    ^^^^^^^^^^^^^^^^^^^^^^\nAttributeError: 'dict' object has no attribute 'add_iou'\n\n====\nERROR: test_both_users_have_0_balance (rest_api_test.RestApiTest.test_both_users_have_0_balance)\n----\nTraceback (most recent call last):\n  File \"rest-api/rest_api_test.py\", line 54, in test_both_users_have_0_balance\n    response = api.post(\"/iou\", payload)\n               ^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"rest-api/rest_api.py\", line 82, in post\n    self._database.add_iou(payload['lender'], payload['borrower'], payload['amount'])\n    ^^^^^^^^^^^^^^^^^^^^^^\nAttributeError: 'dict' object has no attribute 'add_iou'\n\n====\nERROR: test_get_single_user (rest_api_test.RestApiTest.test_get_single_user)\n----\nTraceback (most recent call last):\n  File \"rest-api/rest_api_test.py\", line 39, in test_get_single_user\n    response = api.get(\"/users\", payload)\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"rest-api/rest_api.py\", line 72, in get\n    users = self._database.list_users(payload['users'])\n            ^^^^^^^^^^^^^^^^^^^^^^^^^\nAttributeError: 'dict' object has no attribute 'list_users'\n\n====\n####\n\nSee the testing errors above.\nThe tests are correct.\nFix the code in rest_api.py to resolve the errors.\n",
        "need_input": false
      },
      {
        "type": "file",
        "content": "",
        "language": "python",
        "file_path": "rest_api.py",
        "readonly": false
      }
    ],
    "sender": "Human",
    "summary": null,
    "stats": null,
    "commit_id": null,
    "discarded": false
  },
  {
    "items": [
      {
        "type": "updated_file",
        "content": "import json\nfrom typing import Dict, Any\n\nclass User:\n    def __init__(self, name: str):\n        self.name = name\n        self.owes = {}\n        self.owed_by = {}\n        self.balance = 0\n\n    @property\n    def total_owed(self) -> float:\n        return sum(self.owes.values())\n\n    @property\n    def total_owed_to(self) -> float:\n        return sum(self.owed_by.values())\n\n    def update_balance(self):\n        self.balance = self.total_owed_to - self.total_owed\n\n    def add_debt(self, debtor: str, amount: float):\n        if debtor not in self.owed_by:\n            self.owed_by[debtor] = 0\n        self.owed_by[debtor] += amount\n        self.update_balance()\n\n    def add_credit(self, creditor: str, amount: float):\n        if creditor not in self.owes:\n            self.owes[creditor] = 0\n        self.owes[creditor] += amount\n        self.update_balance()\n\nclass Database:\n    def __init__(self):\n        self._users = {}\n\n    def create_user(self, name: str) -> User:\n        if name in self._users:\n            raise ValueError(f\"User '{name}' already exists.\")\n        user = User(name)\n        self._users[name] = user\n        return user\n\n    def list_users(self, names: list[str]) -> dict[str, User]:\n        sorted_names = sorted(names)\n        return {name: self._users[name] for name in sorted_names}\n\n    def add_iou(self, lender: str, borrower: str, amount: float):\n        if lender not in self._users:\n            self.create_user(lender)\n        if borrower not in self._users:\n            self.create_user(borrower)\n\n        self._users[lender].add_credit(borrower, amount)\n        self._users[borrower].add_debt(lender, amount)\n\nclass RestAPI:\n    def __init__(self, database: Database = None):\n        self._database = database or Database()\n\n    def _serialize_user(self, user: User) -> Dict[str, Any]:\n        return {\n            'name': user.name,\n            'owes': user.owes,\n            'owed_by': user.owed_by,\n            'balance': round(user.balance, 2),\n        }\n\n    def get(self, url: str, payload: dict[str, Any] = None) -> dict[str, Any]:\n        if url == '/users':\n            users = self._database.list_users(payload['users'])\n            return {'users': [self._serialize_user(u) for u in users.values()]}\n        else:\n            raise NotImplementedError('Invalid endpoint')\n\n    def post(self, url: str, payload: dict[str, Any] = None) -> dict[str, Any]:\n        if url == '/add':\n            user = self._database.create_user(payload['user'])\n            return {'users': [self._serialize_user(user)]}\n        elif url == '/iou':\n            self._database.add_iou(payload['lender'], payload['borrower'], payload['amount'])\n            updated_users = self._database.list_users([payload['lender'], payload['borrower']])\n            return {'users': [self._serialize_user(u) for u in updated_users.values()]}\n        else:\n            raise NotImplementedError('Invalid endpoint')\n",
        "language": "python",
        "file_path": "rest_api.py",
        "readonly": false,
        "error": null,
        "invalid": true
      }
    ],
    "sender": "AI",
    "summary": null,
    "stats": null,
    "commit_id": null,
    "discarded": false
  }
]