method: on_llm_end [2023-09-04 15:29:32]
llm_output: null
prompt:
from collections import Counter
from itertools import permutations

def can_chain(dominoes):
    if len(dominoes) < 2:
        return False
    
    # Count the occurrences of each number on both sides of the dominoes
    counts = Counter()
    for d in dominoes:
        counts[(d[0], d[1])] += 1
        
    # Check if it's possible to create a loop by trying all possibilities
    for perm in permutations(dominoes):
        if check_loop([counts, perm]):
            return True
            
    return False

def check_loop(data):
    counts, path = data
    prev_end = None
    
    for d in path:
        start, end = min(d), max(d)
        if prev_end is not None and prev_end != start:
            return False
        
        if counts[(start, end)] > 0:
            counts[(start, end)] -= 1
        else:
            return False
        
        prev_end = end
        
    return True

---
