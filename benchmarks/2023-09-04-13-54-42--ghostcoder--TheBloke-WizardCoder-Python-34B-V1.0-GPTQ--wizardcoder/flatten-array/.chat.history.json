[
  {
    "items": [
      {
        "type": "text",
        "text": "# Instructions\n\nTake a nested list and return a single flattened list with all values except nil/null.\n\nThe challenge is to write a function that accepts an arbitrarily-deep nested list-like structure and returns a flattened structure without any nil/null values.\n\nFor example:\n\ninput: [1,[2,3,null,4],[null],5]\n\noutput: [1,2,3,4,5]\n\n####\n\nUse the above instructions to modify the supplied files: flatten_array.py\nKeep and implement the existing function or class stubs, they will be called from existing unit tests.\nOnly use standard python libraries, don't suggest installing any packages.\n",
        "need_input": false
      },
      {
        "type": "file",
        "content": "",
        "language": "python",
        "file_path": "flatten_array.py",
        "readonly": false
      }
    ],
    "sender": "Human",
    "summary": null,
    "stats": null,
    "commit_id": null,
    "discarded": false
  },
  {
    "items": [
      {
        "type": "updated_file",
        "content": "from typing import List, Any\n\ndef flatten(iterable: List) -> List[Any]:\n    \"\"\"\n    Flattens a nested list-like structure into a flat list.\n    \n    Args:\n    iterable (List): The nested list-like structure to flatten.\n    \n    Returns:\n    List[Any]: The flattened list.\n    \"\"\"\n    if not isinstance(iterable, list):\n        raise ValueError(\"Input must be of type 'list'.\")\n\n    def _flatten(lst):\n        result = []\n\n        for item in lst:\n            if isinstance(item, list):\n                result += _flatten(item)\n            elif item is not None:\n                result.append(item)\n\n        return result\n\n    return _flatten(iterable)",
        "language": "python",
        "file_path": "flatten_array.py",
        "readonly": false,
        "error": null,
        "invalid": false
      }
    ],
    "sender": "AI",
    "summary": null,
    "stats": null,
    "commit_id": null,
    "discarded": false
  }
]