[
  {
    "items": [
      {
        "type": "text",
        "text": "# Instructions\n\nCreate an implementation of the rotational cipher, also sometimes called the Caesar cipher.\n\nThe Caesar cipher is a simple shift cipher that relies on transposing all the letters in the alphabet using an integer key between `0` and `26`.\nUsing a key of `0` or `26` will always yield the same output due to modular arithmetic.\nThe letter is shifted for as many values as the value of the key.\n\nThe general notation for rotational ciphers is `ROT + <key>`.\nThe most commonly used rotational cipher is `ROT13`.\n\nA `ROT13` on the Latin alphabet would be as follows:\n\n```text\nPlain:  abcdefghijklmnopqrstuvwxyz\nCipher: nopqrstuvwxyzabcdefghijklm\n```\n\nIt is stronger than the Atbash cipher because it has 27 possible keys, and 25 usable keys.\n\nCiphertext is written out in the same formatting as the input including spaces and punctuation.\n\n## Examples\n\n- ROT5  `omg` gives `trl`\n- ROT0  `c` gives `c`\n- ROT26 `Cool` gives `Cool`\n- ROT13 `The quick brown fox jumps over the lazy dog.` gives `Gur dhvpx oebja sbk whzcf bire gur ynml qbt.`\n- ROT13 `Gur dhvpx oebja sbk whzcf bire gur ynml qbt.` gives `The quick brown fox jumps over the lazy dog.`\n\n####\n\nUse the above instructions to modify the supplied files: rotational_cipher.py\nKeep and implement the existing function or class stubs, they will be called from existing unit tests.\nOnly use standard python libraries, don't suggest installing any packages.\n",
        "need_input": false
      },
      {
        "type": "file",
        "content": "",
        "language": "python",
        "file_path": "rotational_cipher.py",
        "readonly": false
      }
    ],
    "sender": "Human",
    "summary": null,
    "stats": null,
    "commit_id": null,
    "discarded": false
  },
  {
    "items": [
      {
        "type": "updated_file",
        "content": "import string\nfrom typing import List\n\ndef rotate(text: str, key: int) -> str:\n    lowercase_letters = string.ascii_lowercase\n    uppercase_letters = string.ascii_uppercase\n\n    # Create a dictionary to store the mappings of characters to their rotated counterparts\n    rotation_dict = {}\n    for char in lowercase_letters:\n        index = (lowercase_letters.index(char) + key) % 26\n        rotation_dict[char] = lowercase_letters[index]\n\n        # Handle uppercase letters\n        uppercase_version = char.upper()\n        rotation_dict[uppercase_version] = lowercase_letters[index].upper()\n\n    # Split the text into words and iterate through each character\n    words = text.split(' ')\n    rotated_words = []\n    for word in words:\n        rotated_word = ''\n        for char in word:\n            if char in rotation_dict:\n                rotated_word += rotation_dict[char]\n            else:\n                rotated_word += char\n\n        rotated_words.append(rotated_word)\n\n    return ' '.join(rotated_words)\n\n# Test cases\nprint(rotate('omg', 5))  # Output: trl\nprint(rotate('c', 0))   # Output: c\nprint(rotate('Cool', 26))  # Output: Cool\nprint(rotate('The quick brown fox jumps over the lazy dog.', 13))  # Output: Gur dhvpx oebja sbk whzcf bire gur ynml qbt.\nprint(rotate('Gur dhvpx oebja sbk whzcf bire gur ynml qbt.', 13))  # Output: The quick brown fox jumps over the lazy dog.",
        "language": "python",
        "file_path": "rotational_cipher.py",
        "readonly": false,
        "error": null,
        "invalid": false
      }
    ],
    "sender": "AI",
    "summary": null,
    "stats": null,
    "commit_id": null,
    "discarded": false
  }
]