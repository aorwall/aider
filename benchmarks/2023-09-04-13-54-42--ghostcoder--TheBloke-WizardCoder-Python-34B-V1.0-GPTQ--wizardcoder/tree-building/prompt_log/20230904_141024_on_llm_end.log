method: on_llm_end [2023-09-04 14:10:24]
llm_output: null
prompt:
import sys
from typing import List

class Record:
    def __init__(self, record_id, parent_id):
        self.record_id = record_id
        self.parent_id = parent_id


class Node:
    def __init__(self, node_id):
        self.node_id = node_id
        self.children = []


def BuildTree(records: List[Record]) -> Node:
    root = None

    # Sort records by id
    records.sort(key=lambda x: x.record_id)

    # Check for broken tree conditions
    ordered_ids = [r.record_id for r in records]
    if not all([ordered_ids[i] <= i for i in range(len(ordered_ids))]):
        raise ValueError("Invalid tree structure")

    # Create nodes
    nodes = {r.record_id: Node(r.record_id) for r in records}

    # Setup parent-child relationships
    for r in records:
        if r.parent_id >= 0:
            try:
                nodes[r.parent_id].children.append(nodes[r.record_id])
            except KeyError as e:
                print(f"Parent node with id {e} does not exist", file=sys.stderr)
                raise ValueError("Invalid tree structure")
        else:
            root = nodes[r.record_id]

    return root

---
