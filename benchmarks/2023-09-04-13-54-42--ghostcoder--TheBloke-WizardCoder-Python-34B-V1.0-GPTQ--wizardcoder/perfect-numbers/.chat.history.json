[
  {
    "items": [
      {
        "type": "text",
        "text": "# Instructions\n\nDetermine if a number is perfect, abundant, or deficient based on\nNicomachus' (60 - 120 CE) classification scheme for positive integers.\n\nThe Greek mathematician [Nicomachus][nicomachus] devised a classification scheme for positive integers, identifying each as belonging uniquely to the categories of **perfect**, **abundant**, or **deficient** based on their [aliquot sum][aliquot-sum].\nThe aliquot sum is defined as the sum of the factors of a number not including the number itself.\nFor example, the aliquot sum of 15 is (1 + 3 + 5) = 9\n\n- **Perfect**: aliquot sum = number\n  - 6 is a perfect number because (1 + 2 + 3) = 6\n  - 28 is a perfect number because (1 + 2 + 4 + 7 + 14) = 28\n- **Abundant**: aliquot sum > number\n  - 12 is an abundant number because (1 + 2 + 3 + 4 + 6) = 16\n  - 24 is an abundant number because (1 + 2 + 3 + 4 + 6 + 8 + 12) = 36\n- **Deficient**: aliquot sum < number\n  - 8 is a deficient number because (1 + 2 + 4) = 7\n  - Prime numbers are deficient\n\nImplement a way to determine whether a given number is **perfect**.\nDepending on your language track, you may also need to implement a way to determine whether a given number is **abundant** or **deficient**.\n\n[nicomachus]: https://en.wikipedia.org/wiki/Nicomachus\n[aliquot-sum]: https://en.wikipedia.org/wiki/Aliquot_sum\n# Instructions append\n\n## Exception messages\n\nSometimes it is necessary to [raise an exception](https://docs.python.org/3/tutorial/errors.html#raising-exceptions). When you do this, you should always include a **meaningful error message** to indicate what the source of the error is. This makes your code more readable and helps significantly with debugging. For situations where you know that the error source will be a certain type, you can choose to raise one of the [built in error types](https://docs.python.org/3/library/exceptions.html#base-classes), but should still include a meaningful message.\n\nThis particular exercise requires that you use the [raise statement](https://docs.python.org/3/reference/simple_stmts.html#the-raise-statement) to \"throw\" a `ValueError` if the `classify()` function is passed a number that is not a _positive integer_.  The tests will only pass if you both `raise` the `exception` and include a message with it.\n\nTo raise a `ValueError` with a message, write the message as an argument to the `exception` type:\n\n```python\n# if a number to be classified is less than 1.\nraise ValueError(\"Classification is only possible for positive integers.\")\n```\n\n####\n\nUse the above instructions to modify the supplied files: perfect_numbers.py\nKeep and implement the existing function or class stubs, they will be called from existing unit tests.\nOnly use standard python libraries, don't suggest installing any packages.\n",
        "need_input": false
      },
      {
        "type": "file",
        "content": "",
        "language": "python",
        "file_path": "perfect_numbers.py",
        "readonly": false
      }
    ],
    "sender": "Human",
    "summary": null,
    "stats": null,
    "commit_id": null,
    "discarded": false
  },
  {
    "items": [
      {
        "type": "updated_file",
        "content": "def classify(number):\n    \"\"\" A perfect number equals the sum of its positive divisors.\n    \n    :param number: int a positive integer\n    :return: str the classification of the input integer\n    \"\"\"\n    # Raise a ValueError if the input is not a positive integer.\n    if not isinstance(number, int) or number <= 0:\n        raise ValueError(\"Classification is only possible for positive integers.\")\n\n    # Calculate the aliquot sum of the input number.\n    aliquot_sum = sum([i for i in range(1, number // 2 + 1) if number % i == 0])\n\n    # Determine the classification of the input number based on its aliquot sum.\n    if aliquot_sum == number:\n        return 'perfect'\n    elif aliquot_sum > number:\n        return 'abundant'\n    else:\n        return 'deficient'\n",
        "language": "python",
        "file_path": "perfect_numbers.py",
        "readonly": false,
        "error": null,
        "invalid": false
      }
    ],
    "sender": "AI",
    "summary": null,
    "stats": null,
    "commit_id": null,
    "discarded": false
  }
]