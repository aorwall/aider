[
  {
    "items": [
      {
        "type": "text",
        "text": "# Instructions\n\nIf you want to build something using a Raspberry Pi, you'll probably use _resistors_.\nFor this exercise, you need to know two things about them:\n\n- Each resistor has a resistance value.\n- Resistors are small - so small in fact that if you printed the resistance value on them, it would be hard to read.\n\nTo get around this problem, manufacturers print color-coded bands onto the resistors to denote their resistance values.\nEach band has a position and a numeric value.\n\nThe first 2 bands of a resistor have a simple encoding scheme: each color maps to a single number.\n\nIn this exercise you are going to create a helpful program so that you don't have to remember the values of the bands.\n\nThese colors are encoded as follows:\n\n- Black: 0\n- Brown: 1\n- Red: 2\n- Orange: 3\n- Yellow: 4\n- Green: 5\n- Blue: 6\n- Violet: 7\n- Grey: 8\n- White: 9\n\nThe goal of this exercise is to create a way:\n\n- to look up the numerical value associated with a particular color band\n- to list the different band colors\n\nMnemonics map the colors to the numbers, that, when stored as an array, happen to map to their index in the array:\nBetter Be Right Or Your Great Big Values Go Wrong.\n\nMore information on the color encoding of resistors can be found in the [Electronic color code Wikipedia article][e-color-code].\n\n[e-color-code]: https://en.wikipedia.org/wiki/Electronic_color_code\n\n####\n\nUse the above instructions to modify the supplied files: resistor_color.py\nKeep and implement the existing function or class stubs, they will be called from existing unit tests.\nOnly use standard python libraries, don't suggest installing any packages.\n",
        "need_input": false
      },
      {
        "type": "file",
        "content": "",
        "language": "python",
        "file_path": "resistor_color.py",
        "readonly": false
      }
    ],
    "sender": "Human",
    "summary": null,
    "stats": null,
    "commit_id": null,
    "discarded": false
  },
  {
    "items": [
      {
        "type": "updated_file",
        "content": "colors_map = {\n    \"black\": 0,\n    \"brown\": 1,\n    \"red\": 2,\n    \"orange\": 3,\n    \"yellow\": 4,\n    \"green\": 5,\n    \"blue\": 6,\n    \"violet\": 7,\n    \"grey\": 8,\n    \"white\": 9\n}\n\n\ndef color_code(color):\n    \"\"\"Return the numeric value of a color.\"\"\"\n    try:\n        return colors_map[color]\n    except KeyError:\n        raise ValueError('Invalid color')\n\n\ndef colors():\n    \"\"\"List the colors and their corresponding codes.\"\"\"\n    return [(name, code) for name, code in colors_map.items()]\n",
        "language": "python",
        "file_path": "resistor_color.py",
        "readonly": false,
        "error": null,
        "invalid": false
      }
    ],
    "sender": "AI",
    "summary": null,
    "stats": null,
    "commit_id": null,
    "discarded": false
  },
  {
    "items": [
      {
        "type": "text",
        "text": ".F..\n====\nFAIL: test_colors (resistor_color_test.ResistorColorTest.test_colors)\n----\nTraceback (most recent call last):\n  File \"resistor-color/resistor_color_test.py\", line 36, in test_colors\n    self.assertEqual(colors(), expected)\nAssertionError: Lists differ: [('black', 0), ('brown', 1), ('red', 2), ([92 chars], 9)] != ['black', 'brown', 'red', 'orange', 'yello[42 chars]ite']\n\nFirst differing element 0:\n('black', 0)\n'black'\n\n- [('black', 0),\n?  -        ----\n\n+ ['black',\n-  ('brown', 1),\n?  -        ----\n\n+  'brown',\n-  ('red', 2),\n+  'red',\n-  ('orange', 3),\n?  -         ----\n\n+  'orange',\n-  ('yellow', 4),\n?  -         ----\n\n+  'yellow',\n-  ('green', 5),\n?  -        ----\n\n+  'green',\n-  ('blue', 6),\n?  -       ----\n\n+  'blue',\n-  ('violet', 7),\n?  -         ----\n\n+  'violet',\n-  ('grey', 8),\n?  -       ----\n\n+  'grey',\n-  ('white', 9)]\n?  -       ----\n\n####\n\nSee the testing errors above.\nThe tests are correct.\nFix the code in resistor_color.py to resolve the errors.\n",
        "need_input": false
      },
      {
        "type": "file",
        "content": "",
        "language": "python",
        "file_path": "resistor_color.py",
        "readonly": false
      }
    ],
    "sender": "Human",
    "summary": null,
    "stats": null,
    "commit_id": null,
    "discarded": false
  },
  {
    "items": [
      {
        "type": "updated_file",
        "content": "colors_map = {\n    \"black\": 0,\n    \"brown\": 1,\n    \"red\": 2,\n    \"orange\": 3,\n    \"yellow\": 4,\n    \"green\": 5,\n    \"blue\": 6,\n    \"violet\": 7,\n    \"grey\": 8,\n    \"white\": 9\n}\n\n\ndef color_code(color):\n    \"\"\"Return the numeric value of a color.\"\"\"\n    try:\n        return colors_map[color]\n    except KeyError:\n        raise ValueError('Invalid color')\n\n\ndef colors():\n    \"\"\"List the colors and their corresponding codes.\"\"\"\n    return [(name, code) for name, code in colors_map.items()]\n",
        "language": "python",
        "file_path": "resistor_color.py",
        "readonly": false,
        "error": null,
        "invalid": true
      }
    ],
    "sender": "AI",
    "summary": null,
    "stats": null,
    "commit_id": null,
    "discarded": false
  }
]