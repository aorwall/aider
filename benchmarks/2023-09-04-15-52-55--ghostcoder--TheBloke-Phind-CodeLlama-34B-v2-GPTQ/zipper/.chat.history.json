[
  {
    "items": [
      {
        "type": "text",
        "text": "# Instructions\n\nCreating a zipper for a binary tree.\n\n[Zippers][zipper] are a purely functional way of navigating within a data structure and manipulating it.\nThey essentially contain a data structure and a pointer into that data structure (called the focus).\n\nFor example given a rose tree (where each node contains a value and a list of child nodes) a zipper might support these operations:\n\n- `from_tree` (get a zipper out of a rose tree, the focus is on the root node)\n- `to_tree` (get the rose tree out of the zipper)\n- `value` (get the value of the focus node)\n- `prev` (move the focus to the previous child of the same parent,\n  returns a new zipper)\n- `next` (move the focus to the next child of the same parent, returns a\n  new zipper)\n- `up` (move the focus to the parent, returns a new zipper)\n- `set_value` (set the value of the focus node, returns a new zipper)\n- `insert_before` (insert a new subtree before the focus node, it\n  becomes the `prev` of the focus node, returns a new zipper)\n- `insert_after` (insert a new subtree after the focus node, it becomes\n  the `next` of the focus node, returns a new zipper)\n- `delete` (removes the focus node and all subtrees, focus moves to the\n  `next` node if possible otherwise to the `prev` node if possible,\n  otherwise to the parent node, returns a new zipper)\n\n[zipper]: https://en.wikipedia.org/wiki/Zipper_%28data_structure%29\n\n####\n\nUse the above instructions to modify the supplied files: zipper.py\nKeep and implement the existing function or class stubs, they will be called from existing unit tests.\nOnly use standard python libraries, don't suggest installing any packages.\n",
        "need_input": false
      },
      {
        "type": "file",
        "content": "",
        "language": "python",
        "file_path": "zipper.py",
        "readonly": false
      }
    ],
    "sender": "Human",
    "summary": null,
    "stats": null,
    "commit_id": null,
    "discarded": false
  },
  {
    "items": [
      {
        "type": "updated_file",
        "content": "class Node:\n    def __init__(self, value, left=None, right=None):\n        self.value = value\n        self.left = left\n        self.right = right\n\nclass Zipper:\n    def __init__(self, tree):\n        self._focus = None\n        self._stack = []\n        self._root = Node(*tree)\n\n    @staticmethod\n    def from_tree(tree):\n        return Zipper(tree)\n\n    def value(self):\n        return self._focus.value\n\n    def set_value(self, value):\n        self._focus.value = value\n        return self\n\n    def left(self):\n        if not self._focus.left:\n            raise Exception('No left child')\n        self._stack.append((self._focus, 'left'))\n        self._focus = self._focus.left\n        return self\n\n    def set_left(self, left):\n        self._focus.left = left\n        return self\n\n    def right(self):\n        if not self._focus.right:\n            raise Exception('No right child')\n        self._stack.append((self._focus, 'right'))\n        self._focus = self._focus.right\n        return self\n\n    def set_right(self, right):\n        self._focus.right = right\n        return self\n\n    def up(self):\n        try:\n            prev_node, direction = self._stack.pop()\n            if direction == 'left':\n                prev_node.left = self._focus\n            else:\n                prev_node.right = self._focus\n            self._focus = prev_node\n        except IndexError:\n            # We have reached the root\n            pass\n        return self\n\n    def to_tree(self):\n        while len(self._stack) > 0:\n            self.up()\n        return self._root\n",
        "language": "python",
        "file_path": "zipper.py",
        "readonly": false,
        "error": null,
        "invalid": false
      }
    ],
    "sender": "AI",
    "summary": null,
    "stats": null,
    "commit_id": null,
    "discarded": false
  },
  {
    "items": [
      {
        "type": "text",
        "text": "FEEEEEEEEEEEFE\n====\nERROR: test_dead_end (zipper_test.ZipperTest.test_dead_end)\n----\nTraceback (most recent call last):\n  File \"zipper/zipper_test.py\", line 65, in test_dead_end\n    result = zipper.left().left()\n             ^^^^^^^^^^^^^\n  File \"zipper/zipper.py\", line 25, in left\n    if not self._focus.left:\n           ^^^^^^^^^^^^^^^^\nAttributeError: 'NoneType' object has no attribute 'left'\n\n====\nERROR: test_different_paths_to_same_zipper (zipper_test.ZipperTest.test_different_paths_to_same_zipper)\n----\nTraceback (most recent call last):\n  File \"zipper/zipper_test.py\", line 306, in test_different_paths_to_same_zipper\n    result = Zipper.from_tree(initial).left().up().right().to_tree()\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"zipper/zipper.py\", line 25, in left\n    if not self._focus.left:\n           ^^^^^^^^^^^^^^^^\nAttributeError: 'NoneType' object has no attribute 'left'\n\n====\nERROR: test_left_right_and_up (zipper_test.ZipperTest.test_left_right_and_up)\n----\nTraceback (most recent call last):\n  File \"zipper/zipper_test.py\", line 120, in test_left_right_and_up\n    result = zipper.left().up().right().up().left().right().value()\n             ^^^^^^^^^^^^^\n  File \"zipper/zipper.py\", line 25, in left\n    if not self._focus.left:\n           ^^^^^^^^^^^^^^^^\nAttributeError: 'NoneType' object has no attribute 'left'\n\n====\nERROR: test_left_right_and_value (zipper_test.ZipperTest.test_left_right_and_value)\n----\nTraceback (most recent call last):\n  File \"zipper/zipper_test.py\", line 50, in test_left_right_and_value\n    result = zipper.left().right().value()\n             ^^^^^^^^^^^^^\n  File \"zipper/zipper.py\", line 25, in left\n    if not self._focus.left:\n           ^^^^^^^^^^^^^^^^\nAttributeError: 'NoneType' object has no attribute 'left'\n\n====\n####\n\nSee the testing errors above.\nThe tests are correct.\nFix the code in zipper.py to resolve the errors.\n",
        "need_input": false
      },
      {
        "type": "file",
        "content": "",
        "language": "python",
        "file_path": "zipper.py",
        "readonly": false
      }
    ],
    "sender": "Human",
    "summary": null,
    "stats": null,
    "commit_id": null,
    "discarded": false
  },
  {
    "items": [
      {
        "type": "updated_file",
        "content": "class Node:\n    def __init__(self, value, left=None, right=None):\n        self.value = value\n        self.left = left\n        self.right = right\n\nclass Zipper:\n    def __init__(self, tree):\n        self._focus = None\n        self._stack = []\n        self._root = Node(*tree)\n\n    @staticmethod\n    def from_tree(tree):\n        return Zipper(tree)\n\n    def value(self):\n        return self._focus.value\n\n    def set_value(self, value):\n        self._focus.value = value\n        return self\n\n    def left(self):\n        if not self._focus or not self._focus.left:\n            raise Exception('No left child')\n        self._stack.append((self._focus, 'left'))\n        self._focus = self._focus.left\n        return self\n\n    def set_left(self, left):\n        if not self._focus:\n            self._focus = Node(None, left=left)\n        else:\n            self._focus.left = left\n        return self\n\n    def right(self):\n        if not self._focus or not self._focus.right:\n            raise Exception('No right child')\n        self._stack.append((self._focus, 'right'))\n        self._focus = self._focus.right\n        return self\n\n    def set_right(self, right):\n        if not self._focus:\n            self._focus = Node(None, right=right)\n        else:\n            self._focus.right = right\n        return self\n\n    def up(self):\n        try:\n            prev_node, direction = self._stack.pop()\n            if direction == 'left':\n                prev_node.left = self._focus\n            else:\n                prev_node.right = self._focus\n            self._focus = prev_node\n        except IndexError:\n            # We have reached the root\n            pass\n        return self\n\n    def to_tree(self):\n        while len(self._stack) > 0:\n            self.up()\n        return self._root\n",
        "language": "python",
        "file_path": "zipper.py",
        "readonly": false,
        "error": null,
        "invalid": false
      }
    ],
    "sender": "AI",
    "summary": null,
    "stats": null,
    "commit_id": null,
    "discarded": false
  }
]