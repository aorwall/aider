method: on_llm_end [2023-09-04 16:03:03]
llm_output: null
prompt:
NODE, EDGE, ATTR = range(3)


class Node:
    def __init__(self, name, attrs):
        self.name = name
        self.attrs = attrs

    def __eq__(self, other):
        return self.name == other.name and self.attrs == other.attrs


class Edge:
    def __init__(self, src, dst, attrs):
        self.src = src
        self.dst = dst
        self.attrs = attrs

    def __eq__(self, other):
        return (self.src == other.src and
                self.dst == other.dst and
                self.attrs == other.attrs)


class Graph:
    def __init__(self, data=None):
        self.nodes = []
        self.edges = []
        self.attrs = {}
        
        if not data:
            return
            
        for item in data:
            item_type = type(item)
            if item_type is tuple:
                if len(item) != 2:
                    raise ValueError('Invalid edge')
                else:
                    self._add_edge(*item)
            elif item_type is dict:
                if 'node' in item or 'nodes' in item:
                    nodes = item.get('node', item.get('nodes'))
                    if type(nodes) is list:
                        map(self._add_node, nodes)
                    else:
                        self._add_node(nodes)
                elif 'attr' in item or 'attributes' in item:
                    attrs = item.get('attr', item.get('attributes'))
                    if type(attrs) is dict:
                        self.attrs.update(attrs)
                    else:
                        raise ValueError('Invalid attribute format')
            else:
                raise TypeError('Data must be either edge, node or attribute')

    def _add_node(self, node):
        if isinstance(node, str):
            node = Node(node, {})
        elif isinstance(node, tuple):
            if len(node) > 1:
                node = Node(node[0], node[1])
            else:
                node = Node(node[0], {})
        if isinstance(node, Node):
            self.nodes.append(node)
        else:
            raise TypeError('Invalid node format')

    def _add_edge(self, src, dst):
        if isinstance(src, str) and isinstance(dst, str):
            edge = Edge(src, dst, {})
        elif isinstance(src, tuple) and isinstance(dst, tuple):
            if len(src) > 1 and len(dst) > 1:
                edge = Edge(src[0], dst[0], {'src': src[1], 'dst': dst[1]})
            else:
                edge = Edge(src[0], dst[0], {})
        if isinstance(edge, Edge):
            self.edges.append(edge)
        else:
            raise TypeError('Invalid edge format')

---
