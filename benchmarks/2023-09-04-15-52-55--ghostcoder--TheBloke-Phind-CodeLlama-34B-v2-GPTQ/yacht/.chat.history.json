[
  {
    "items": [
      {
        "type": "text",
        "text": "# Instructions\n\nThe dice game [Yacht][yacht] is from the same family as Poker Dice, Generala and particularly Yahtzee, of which it is a precursor.\nIn the game, five dice are rolled and the result can be entered in any of twelve categories.\nThe score of a throw of the dice depends on category chosen.\n\n## Scores in Yacht\n\n| Category | Score | Description | Example |\n| -------- | ----- | ----------- | ------- |\n| Ones | 1 \u00d7 number of ones | Any combination | 1 1 1 4 5 scores 3 |\n| Twos | 2 \u00d7 number of twos | Any combination | 2 2 3 4 5 scores 4 |\n| Threes | 3 \u00d7 number of threes | Any combination | 3 3 3 3 3 scores 15 |\n| Fours | 4 \u00d7 number of fours | Any combination | 1 2 3 3 5 scores 0 |\n| Fives | 5 \u00d7 number of fives| Any combination | 5 1 5 2 5 scores 15 |\n| Sixes | 6 \u00d7 number of sixes | Any combination | 2 3 4 5 6 scores 6 |\n| Full House | Total of the dice | Three of one number and two of another | 3 3 3 5 5 scores 19 |\n| Four of a Kind | Total of the four dice | At least four dice showing the same face | 4 4 4 4 6 scores 16 |\n| Little Straight |  30 points | 1-2-3-4-5 | 1 2 3 4 5 scores 30 |\n| Big Straight | 30 points | 2-3-4-5-6 | 2 3 4 5 6 scores 30 |\n| Choice | Sum of the dice | Any combination | 2 3 3 4 6 scores 18 |\n| Yacht | 50 points | All five dice showing the same face | 4 4 4 4 4 scores 50 |\n\nIf the dice do not satisfy the requirements of a category, the score is zero.\nIf, for example, *Four Of A Kind* is entered in the *Yacht* category, zero points are scored.\nA *Yacht* scores zero if entered in the *Full House* category.\n\n## Task\n\nGiven a list of values for five dice and a category, your solution should return the score of the dice for that category.\nIf the dice do not satisfy the requirements of the category your solution should return 0.\nYou can assume that five values will always be presented, and the value of each will be between one and six inclusively.\nYou should not assume that the dice are ordered.\n\n[yacht]: https://en.wikipedia.org/wiki/Yacht_(dice_game)\n\n####\n\nUse the above instructions to modify the supplied files: yacht.py\nKeep and implement the existing function or class stubs, they will be called from existing unit tests.\nOnly use standard python libraries, don't suggest installing any packages.\n",
        "need_input": false
      },
      {
        "type": "file",
        "content": "",
        "language": "python",
        "file_path": "yacht.py",
        "readonly": false
      }
    ],
    "sender": "Human",
    "summary": null,
    "stats": null,
    "commit_id": null,
    "discarded": false
  },
  {
    "items": [
      {
        "type": "updated_file",
        "content": "from collections import Counter\n\n# Score categories.\n# Change the values as you see fit.\nYACHT = \"Y\"\nONES = \"1\"\nTWOS = \"2\"\nTHREES = \"3\"\nFOURS = \"4\"\nFIVES = \"5\"\nSIXES = \"6\"\nFULL_HOUSE = \"F\"\nFOUR_OF_A_KIND = \"K\"\nLITTLE_STRAIGHT = \"L\"\nBIG_STRAIGHT = \"B\"\nCHOICE = \"C\"\n\ndef score(dice, category):\n    counts = Counter(dice)\n\n    if category == ONES:\n        return sum([counts[i]*i for i in range(1, 7)])\n    elif category == TWOS:\n        return sum([counts[i]*i for i in range(1, 7)])\n    elif category == THREES:\n        return sum([counts[i]*i for i in range(1, 7)])\n    elif category == FOURS:\n        return sum([counts[i]*i for i in range(1, 7)])\n    elif category == FIVES:\n        return sum([counts[i]*i for i in range(1, 7)])\n    elif category == SIXES:\n        return sum([counts[i]*i for i in range(1, 7)])\n    elif category == FULL_HOUSE:\n        return 25 if len(set(counts.values()))==2 else 0\n    elif category == FOUR_OF_A_KIND:\n        return sum(list(counts.keys())[-1]*list(counts.values())[-1]*5//4 if len(counts)>=4 else 0)\n    elif category == LITTLE_STRAIGHT:\n        return 30 if set(range(1, 6)) <= set(dice) else 0\n    elif category == BIG_STRAIGHT:\n        return 30 if set(range(2, 7)) <= set(dice) else 0\n    elif category == CHOICE:\n        return sum(dice)\n    elif category == YACHT:\n        return 50 if len(set(counts.values()))==1 else 0\n    else:\n        raise ValueError(\"Invalid category\")\n",
        "language": "python",
        "file_path": "yacht.py",
        "readonly": false,
        "error": null,
        "invalid": false
      }
    ],
    "sender": "AI",
    "summary": null,
    "stats": null,
    "commit_id": null,
    "discarded": false
  },
  {
    "items": [
      {
        "type": "text",
        "text": "...F.EFFEFF...F...FFFFF..E..F\n====\nERROR: test_four_of_a_kind (yacht_test.YachtTest.test_four_of_a_kind)\n----\nTraceback (most recent call last):\n  File \"yacht/yacht_test.py\", line 59, in test_four_of_a_kind\n    self.assertEqual(yacht.score([6, 6, 4, 6, 6], yacht.FOUR_OF_A_KIND), 24)\n                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"yacht/yacht.py\", line 36, in score\n    return sum(list(counts.keys())[-1]*list(counts.values())[-1]*5//4 if len(counts)>=4 else 0)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nTypeError: 'int' object is not iterable\n\n====\nERROR: test_full_house_is_not_four_of_a_kind (yacht_test.YachtTest.test_full_house_is_not_four_of_a_kind)\n----\nTraceback (most recent call last):\n  File \"yacht/yacht_test.py\", line 65, in test_full_house_is_not_four_of_a_kind\n    self.assertEqual(yacht.score([3, 3, 3, 5, 5], yacht.FOUR_OF_A_KIND), 0)\n                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"yacht/yacht.py\", line 36, in score\n    return sum(list(counts.keys())[-1]*list(counts.values())[-1]*5//4 if len(counts)>=4 else 0)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nTypeError: 'int' object is not iterable\n\n====\nERROR: test_yacht_can_be_scored_as_four_of_a_kind (yacht_test.YachtTest.test_yacht_can_be_scored_as_four_of_a_kind)\n----\nTraceback (most recent call last):\n  File \"yacht/yacht_test.py\", line 62, in test_yacht_can_be_scored_as_four_of_a_kind\n    self.assertEqual(yacht.score([3, 3, 3, 3, 3], yacht.FOUR_OF_A_KIND), 12)\n                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"yacht/yacht.py\", line 36, in score\n    return sum(list(counts.keys())[-1]*list(counts.values())[-1]*5//4 if len(counts)>=4 else 0)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nTypeError: 'int' object is not iterable\n\n====\nFAIL: test_fives (yacht_test.YachtTest.test_fives)\n----\nTraceback (most recent call last):\n  File \"yacht/yacht_test.py\", line 38, in test_fives\n    self.assertEqual(yacht.score([1, 5, 3, 5, 3], yacht.FIVES), 10)\nAssertionError: 17 != 10\n\n====\nFAIL: test_four_of_a_kind_is_not_a_full_house (yacht_test.YachtTest.test_four_of_a_kind_is_not_a_full_house)\n----\nTraceback (most recent call last):\n  File \"yacht/yacht_test.py\", line 53, in test_four_of_a_kind_is_not_a_full_house\n####\n\nSee the testing errors above.\nThe tests are correct.\nFix the code in yacht.py to resolve the errors.\n",
        "need_input": false
      },
      {
        "type": "file",
        "content": "",
        "language": "python",
        "file_path": "yacht.py",
        "readonly": false
      }
    ],
    "sender": "Human",
    "summary": null,
    "stats": null,
    "commit_id": null,
    "discarded": false
  },
  {
    "items": [
      {
        "type": "updated_file",
        "content": "from collections import Counter\n\n# Score categories.\n# Change the values as you see fit.\nYACHT = \"Y\"\nONES = \"1\"\nTWOS = \"2\"\nTHREES = \"3\"\nFOURS = \"4\"\nFIVES = \"5\"\nSIXES = \"6\"\nFULL_HOUSE = \"F\"\nFOUR_OF_A_KIND = \"K\"\nLITTLE_STRAIGHT = \"L\"\nBIG_STRAIGHT = \"B\"\nCHOICE = \"C\"\n\ndef score(dice, category):\n    counts = Counter(dice)\n\n    if category == ONES:\n        return sum([counts[i]*i for i in range(1, 7)])\n    elif category == TWOS:\n        return sum([counts[i]*i for i in range(1, 7)])\n    elif category == THREES:\n        return sum([counts[i]*i for i in range(1, 7)])\n    elif category == FOURS:\n        return sum([counts[i]*i for i in range(1, 7)])\n    elif category == FIVES:\n        return sum([counts[i]*i for i in range(1, 7)])\n    elif category == SIXES:\n        return sum([counts[i]*i for i in range(1, 7)])\n    elif category == FULL_HOUSE:\n        return 25 if len(set(counts.values()))==2 else 0\n    elif category == FOUR_OF_A_KIND:\n        return sum(key*value*5//4 for key, value in counts.items() if list(counts.keys())[-1]>=4)\n    elif category == LITTLE_STRAIGHT:\n        return 30 if set(range(1, 6)) <= set(dice) else 0\n    elif category == BIG_STRAIGHT:\n        return 30 if set(range(2, 7)) <= set(dice) else 0\n    elif category == CHOICE:\n        return sum(dice)\n    elif category == YACHT:\n        return 50 if len(set(counts.values()))==1 else 0\n    else:\n        raise ValueError(\"Invalid category\")\n",
        "language": "python",
        "file_path": "yacht.py",
        "readonly": false,
        "error": null,
        "invalid": false
      }
    ],
    "sender": "AI",
    "summary": null,
    "stats": null,
    "commit_id": null,
    "discarded": false
  }
]