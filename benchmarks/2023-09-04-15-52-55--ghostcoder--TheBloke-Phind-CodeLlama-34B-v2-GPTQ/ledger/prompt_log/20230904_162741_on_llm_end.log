method: on_llm_end [2023-09-04 16:27:41]
llm_output: null
prompt:
class LedgerEntry:
    def __init__(self, date, description, change):
        self.date = date
        self.description = description
        self.change = change

    @staticmethod
    def from_string(ledger_entry_line):
        fields = ledger_entry_line.split(',')
        date = datetime.datetime.strptime(fields[0], '%Y-%m-%d').date()
        description = fields[1]
        change = int(float(fields[2]) * 100)
        return LedgerEntry(date, description, change)

    def __repr__(self):
        return f"{self.__class__.__name__}({self.date!r}, {self.description!r}, {self.change})"


class Ledger:
    def __init__(self):
        self._entries = []

    def add_entry(self, entry):
        self._entries.append(entry)

    def remove_entry(self, index):
        del self._entries[index]

    def get_balance(self):
        balance = 0
        for entry in reversed(self._entries):
            balance -= entry.change
        return balance

    def print_table(self, currency='USD'):
        table = ''
        for i, entry in enumerate(reversed(self._entries)):
            # Write entry date to table
            day = entry.date.day
            day = str(day)
            if len(day) < 2:
                day = '0' + day
            date_str = day
            date_str += '-'
            month = entry.date.month
            month = str(month)
            if len(month) < 2:
                month = '0' + month
            date_str += month
            date_str += '-'
            year = entry.date.year
            year = str(year)
            while len(year) < 4:
                year = '0' + year
            date_str += year
            table += date_str
            table += ' | '

            # Write entry description to table
            # Truncate if necessary
            if len(entry.description) > 25:
                for i in range(22):
                    table += entry.description[i]
                table += '...'
            else:
                for i in range(25):
                    if len(entry.description) > i:
                        table += entry.description[i]
                    else:
                        table += ' '
            table += ' | '

            # Write entry change to table
            if currency == 'USD':
                change_str = '$ '
                if entry.change < 0:
                    change_str += '-'
                change_dollar = abs(int(entry.change / 100.0))
                dollar_parts = []
                while change_dollar > 0:
                    dollar_parts.insert(0, str(change_dollar % 1000))
                    change_dollar = change_dollar // 1000
                if len(dollar_parts) == 0:
                    change_str += '0'
                else:
                    while True:
                        change_str += dollar_parts[0]
                        dollar_parts.pop(0)
                        if len(dollar_parts) == 0:
                            break
                        change_str += '.'
                change_str += ','
                change_cents = abs(entry.change) % 100
                change_cents = str(change_cents)
                if len(change_cents) < 2:
                    change_cents = '0' + change_cents
                change_str += change_cents
                change_str += ' '
                while len(change_str) < 13:
                    change_str = ' ' + change_str
                table += change_str
            elif currency == 'EUR':
                change_str = u'â‚¬ '
                if entry.change < 0:
                    change_str += '-'
                change_euro = abs(int(entry.change / 100.0))
                euro_parts = []
                while change_euro
---
