method: on_llm_end [2023-09-03 17:40:11]
llm_output: null
prompt:
Here's a Python function that can decode any resistor color code based on the standard IEC 600699-2 (IEC 3-digit and 4-digit codes), as well as some nonstandard variants like the EIA/TIA 96-010-01A and EIA/TIA 96-010-02B codes:

```python
def decode_resistor_colors(colors):
    """Decodes a resistor color code into its corresponding resistance value and tolerance."""
    
    # Standard color codes
    multipliers = {"black": 1, "brown": 10, "red": 100, "orange": 10**2, "yellow": 10**3, "green": 10**4, "blue": 10**5, "violet": 10**6, "grey": 10**7, "white": 10**8, "gold": 0.1, "silver": 0.01}
    tolerances = {"none": "+/- 20%", "brown": "+/- 1%", "red": "+/- 2%", "green": "+/- 0.5%", "blue": "+/- 0.25%", "violet": "+/- 0.1%", "gold": "+/- 0.05%", "silver": "+/- 0.025%"}
    tolerance_value = {"none": "", "brown": " ±1%", "red": " ±2%", "green": " ±0.5%", "blue": " ±0.25%", "violet": " ±0.1%", "gold": " ±0.05%", "silver": " ±0.025%"}

    # Nonstandard color codes
    eia_tia_96_010a_multipliers = {"pink": 10**-12, "light blue": 10**-9, "dark green": 10**-6, "light green": 10**-3, "mint": 10**0, "teal": 10**3, "purple": 10**6, "navy": 10**9}
    eia_tia_96_010b_multipliers = {"pink": 10**-12, "light blue": 10**-9, "light gray": 10**-6, "dark gray": 10**-3, "gold": 10**0, "silver": 10**3, "copper": 10**6}

    def get_tolerance(tolerance_code):
        if len(tolerance_code) == 2:
            return tolerances[tolerance_code]
        else:
            return ""

    def get_eia_tia_96_010a_multiplier(color):
        try:
            return eia_tia_96_010a_multipliers[color]
        except KeyError:
            raise ValueError(f"Invalid color {color}.")

    def get_eia_tia_96_010b_multiplier(color):
        try:
            return eia_tia_96_010b_multipliers[color]
        except KeyError:
            raise ValueError(f"Invalid color {color}.")

    def get_multiplier(multiplier_codes):
        result = 1
        for code in multiplier_codes:
            result *= multipliers[code]
        return result

    def get_value(value_codes):
        value = int("".join([str(multipliers[c]) for c in value_codes]))
        return value

    def get_eia_tia_96_010a_value(value_codes):
        value = float("".join([str(get_eia_tia_96_010a_multiplier(c)) for c in value_codes]))
        return value

    def get_eia_tia_96_010b_value(value_codes):
        value = float("".join([str(get_eia_tia_96_010b_multiplier(c)) for c in value_codes]))
        return value

    # Check which format is used
    if all(len(band) <= 2 for band in colors):
        # Standard color code
        tolerance_code = colors[-1][:-1]
        multiplier_codes = colors[:-1]
        value_codes = colors[:-2]
        
        # Calculate the resistance value and tolerance
        resistance = str(get_value(value_codes)) + (" k" if len(value_codes) > 3 else "") + " ohms"
        tolerance = tolerance_value[tolerance_code]
        multiplier = get_multiplier(multiplier_codes)
    elif colors[0].lower() == "gold" or colors[0].lower() == "silver":
        # EIA/TIA 96-010-01A color code
        tolerance_code = colors[-1][:-1]
        multiplier_codes = [colors[0]] + colors[1:-1]
        value_codes = colors[1:-1]
        
        # Calculate the resistance value and tolerance
        resistance = str(get_eia_tia_96_010a_value(value_codes)) + " ohms"
        tolerance = tolerance_value[tolerance_code]
        multiplier = get_multiplier(multiplier_codes)
    elif colors[-1].lower() == "gold" or colors[-1].lower() == "silver":
        # EIA/TIA 96-010-02B color code
        tolerance_code = colors[-2][:-1]
        multiplier_codes = colors[:-2]
        value_codes = colors[:-2]
        
        # Calculate the resistance value and tolerance
        resistance = str(get_eia_tia_96_010b_value(value_codes)) + " ohms"
---
