method: on_llm_end [2023-09-03 17:25:07]
llm_output: null
prompt:
Here is an implementation of a simple REST API using Flask in Python that can handle the given requirements:

```python
from flask import Flask, request, jsonify
import json

app = Flask(__name__)

database = {
    'users': {},
}

@app.route('/', methods=['GET'])
def index():
    return jsonify({"message": "Welcome to the IOU Tracker!"})


@app.route('/users', methods=['POST'])
def add_user():
    data = request.get_json()
    if 'user' in data:
        username = data['user'].lower().capitalize()
        if username not in database['users']:
            database['users'][username] = {'owed_by': {}, 'owes': {}}
            response = {"success": True, "message": f"{username} added successfully."}
        else:
            response = {"success": False, "error": f"{username} already exists in the system."}
    else:
        response = {"success": False, "error": "Please provide a valid user name."}
    
    return jsonify(response)


@app.route('/users', methods=['GET'])
def list_users():
    usernames = sorted([key.title() for key in database['users'].keys()])
    return jsonify({"users": usernames})


@app.route('/iou', methods=['POST'])
def create_iou():
    data = request.get_json()
    if ('lender' in data) and ('borrower' in data) and ('amount' in data):
        lender = data['lender'].lower().capitalize()
        borrower = data['borrower'].lower().capitalize()
        amount = float(data['amount'])
        if lender == borrower:
            response = {"success": False, "error": "Cannot issue IOU to self."}
        elif lender not in database['users']:
            response = {"success": False, "error": f"Lender '{lender}' does not exist in the system."}
        elif borrower not in database['users']:
            response = {"success": False, "error": f"Borrower '{borrower}' does not exist in the system."}
        else:
            database['users'][lender]['owed_by'].setdefault(borrower, 0)
            database['users'][lender]['owed_by'][borrower] += amount
            database['users'][borrower].setdefault('owes', {}).setdefault(lender, 0)
            database['users'][borrower]['owes'][lender] += amount
            response = {"success": True, "message": f"{amount} issued from {lender} to {borrower}"}
    else:
        response = {"success": False, "error": "Invalid parameters provided."}
    
    return jsonify(response)

if __name__ == '__main__':
    app.run(debug=True)
```

To run this code, save it as `rest_api.py` and execute it with `flask run`. You should now have a running server at http://localhost:5000/. The endpoints are `/`, `/users`, and `/iou`. To test the functionality, you can make requests like so:

1. Add users: `curl -X POST -H "Content-Type: application/json" -d '{"user":"John"}' localhost:5000/users`
2. Get users: `curl localhost:5000/users`
3. Issue IOUs: `curl -X POST -H "Content-Type: application/json" -d '{"lender":"John", "borrower":"Mary", "amount":4.5}' localhost:5000/iou`

Note that this implementation only stores the data in memory, which means it won't persist across server restarts. For production purposes, you would want to store the data in a more permanent storage solution such as a database.

Also note that there is no validation on the input format or type, but this could easily be added using Python's built-in `isinstance()` method or external libraries such as Marshmallow. 
---
