method: on_llm_end [2023-09-03 16:40:41]
llm_output: null
prompt:
Solution:

We can check whether a year is a leap year using the following conditions:

If the year is divisible by 4 and not divisible by 100, it is a leap year.
If the year is divisible by both 4 and 100, it may or may not be a leap year depending on whether it is also divisible by 400.
If the year is divisible by 400, it is a leap year.


Here's how we can implement this logic in Python:


```python
def leap_year(year):
    """Return True if year is a leap year, False otherwise."""
    if year % 4 == 0:
        if year % 100 != 0:
            # If the year is divisible by 4 but not by 100, it is a leap year
            return True
        elif year % 400 == 0:
            # If the year is divisible by both 4 and 100, it is a leap year only if it is also divisible by 400
            return True
        else:
            # Otherwise, it is not a leap year
            return False
    else:
        return False
```

This implementation uses nested conditionals to handle all cases correctly. We first check if the year is divisible by 4. If so, we check if it is also divisible by 100. If it is, we need to see if it is divisible by 400 before deciding whether it is a leap year. If it is divisible by 400, it is a leap year; otherwise, it isn't. If the year is not divisible by 4, it cannot be a leap year.


Let's test our solution with some examples:


```python
print(leap_year(1900))  # False (not divisible by 4)
print(leap_year(2000))  # True (divisible by 4 and 400)
print(leap_year(2003))  # False (not divisible by 4)
print(leap_year(2004))  # True (divisible by 4)
print(leap_year(2008))  # True (divisible by 4 and 100, but also divisible by 400)
print(leap_year(2012))  # True (divisible by 4)
print(leap_year(2015))  # False (not divisible by 4)
```

Output:

```
False
True
False
True
True
True
False
```

Our implementation works as expected. 
---
