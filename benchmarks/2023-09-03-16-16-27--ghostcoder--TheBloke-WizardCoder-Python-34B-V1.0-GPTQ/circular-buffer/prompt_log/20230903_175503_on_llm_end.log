method: on_llm_end [2023-09-03 17:55:03]
llm_output: null
prompt:
Here's a possible implementation for `CircularBuffer`:

```python
class BufferFullException(BufferError):
    """Exception raised when CircularBuffer is full.

    message: explanation of the error.

    """
    def __init__(self, message="Buffer is already full"):
        super().__init__(message)


class BufferEmptyException(BufferError):
    """Exception raised when CircularBuffer is empty.

    message: explanation of the error.

    """
    def __init__(self, message="Buffer is empty"):
        super().__init__(message)


class CircularBuffer:
    def __init__(self, capacity):
        if capacity <= 0:
            raise ValueError("Capacity must be greater than zero.")
        self._capacity = capacity
        self._data = [None] * capacity
        self._head = 0
        self._tail = 0
        self._size = 0

    def _increment(self, pointer):
        return (pointer + 1) % self._capacity

    
    def read(self):
        if self._size == 0:
            raise BufferEmptyException()
        value = self._data[self._head]
        self._head = self._increment(self._head)
        self._size -= 1
        return value


    def write(self, data):
        if self._size >= self._capacity:
            raise BufferFullException()
        self._data[self._tail] = data
        self._tail = self._increment(self._tail)
        self._size += 1


    def overwrite(self, data):
        self._data[self._tail] = data
        self._tail = self._increment(self._tail)
        if self._size < self._capacity:
            self._size += 1

    
    def clear(self):
        self._head = 0
        self._tail = 0
        self._size = 0
```

Explanation:

- We define two custom exceptions, `BufferFullException` and `BufferEmptyException`, which inherit from `BufferError`. These will be used later on to signal that the buffer is either full or empty, respectively.
- The constructor takes an integer argument `capacity` and initializes three instance variables: `_capacity` (the maximum number of elements), `_data` (a list of size `capacity`), `_head` (index of the oldest element), and `_tail` (index where next item should be written). Initially, both pointers point to index 0, and `_size` keeps track of how many items have been added so far.
- `_increment()` is a helper method that returns the next index after the given one, wrapping around at the end of the list using modulo arithmetic.
- `read()` raises `BufferEmptyException` if there are no items left to read, otherwise it reads the current head element, updates the head pointer, decrements the size, and returns the value.
- `write()` raises `BufferFullException` if the buffer is already full, otherwise it writes the new element at the tail position, increments the tail pointer, and increases the size by 1.
- `overwrite()` always overwrites the current tail element without checking whether the buffer is full or not. If the buffer was previously empty, it also increments the size.
- `clear()` resets all instance variables to their initial values.

With this implementation, all tests should now pass successfully. 
---
