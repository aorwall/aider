[
  {
    "items": [
      {
        "type": "text",
        "text": "# Instructions\n\nImplement the `keep` and `discard` operation on collections.\nGiven a collection and a predicate on the collection's elements, `keep` returns a new collection containing those elements where the predicate is true, while `discard` returns a new collection containing those elements where the predicate is false.\n\nFor example, given the collection of numbers:\n\n- 1, 2, 3, 4, 5\n\nAnd the predicate:\n\n- is the number even?\n\nThen your keep operation should produce:\n\n- 2, 4\n\nWhile your discard operation should produce:\n\n- 1, 3, 5\n\nNote that the union of keep and discard is all the elements.\n\nThe functions may be called `keep` and `discard`, or they may need different names in order to not clash with existing functions or concepts in your language.\n\n## Restrictions\n\nKeep your hands off that filter/reject/whatchamacallit functionality provided by your standard library!\nSolve this one yourself using other basic tools instead.\n\n####\n\nUse the above instructions to modify the supplied files: strain.py\nKeep and implement the existing function or class stubs, they will be called from unit tests.\nDo not implement or change any unit tests.\nOnly use standard python libraries, don't suggest installing any packages.\n",
        "need_input": false
      },
      {
        "type": "file",
        "content": "",
        "language": "python",
        "file_path": "strain.py",
        "readonly": false
      }
    ],
    "sender": "Human",
    "summary": null,
    "stats": null,
    "commit_id": null,
    "discarded": false
  },
  {
    "items": [
      {
        "type": "text",
        "text": "Here's an implementation of the `keep` and `discard` operations using list comprehensions:",
        "need_input": false
      },
      {
        "type": "updated_file",
        "content": "def keep(sequence, predicate):\n    return [x for x in sequence if predicate(x)]\n\n\ndef discard(sequence, predicate):\n    return [x for x in sequence if not predicate(x)]\n",
        "language": null,
        "file_path": "strain.py",
        "readonly": false,
        "error": null,
        "invalid": false
      },
      {
        "type": "text",
        "text": "We can define our own `is_even` function to test whether a number is even or odd:",
        "need_input": false
      },
      {
        "type": "code",
        "content": "def is_even(num):\n    return num % 2 == 0",
        "language": "python"
      },
      {
        "type": "text",
        "text": "Now let's test it out:",
        "need_input": false
      },
      {
        "type": "code",
        "content": ">>> keep([1, 2, 3, 4, 5], is_even)\n[2, 4]\n>>> discard([1, 2, 3, 4, 5], is_even)\n[1, 3, 5]",
        "language": "python"
      },
      {
        "type": "text",
        "text": "This works because the `keep` function filters out non-even numbers (i.e., keeps only even ones) and the `discard` function does the opposite.\n\nYou could also write these functions using loops, but list comprehension is more concise and Pythonic. Here's how you would do it with loops:",
        "need_input": false
      },
      {
        "type": "updated_file",
        "content": "def keep(sequence, predicate):\n    kept = []\n    for x in sequence:\n        if predicate(x):\n            kept.append(x)\n    return kept\n\n\ndef discard(sequence, predicate):\n    discarded = []\n    for x in sequence:\n        if not predicate(x):\n            discarded.append(x)\n    return discarded\n",
        "language": null,
        "file_path": "strain.py",
        "readonly": false,
        "error": null,
        "invalid": false
      },
      {
        "type": "text",
        "text": "These implementations are equivalent to the previous ones, but less elegant.",
        "need_input": false
      }
    ],
    "sender": "AI",
    "summary": null,
    "stats": null,
    "commit_id": null,
    "discarded": false
  }
]