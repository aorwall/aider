method: on_llm_end [2023-09-01 13:14:47]
llm_output: null
prompt:
 Here is the modified `luhn.py` file that implements the Luhn algorithm:
```python
class Luhn:
    def __init__(self, card_num):
        self.card_num = card_num

    def valid(self):
        # Remove spaces from the card number
        card_num = self.card_num.replace(" ", "")

        # Check if the card number is valid
        if len(card_num) < 2:
            return False

        # Double every second digit, starting from the right
        doubled_digits = []
        for i in range(len(card_num) - 2, -1, -2):
            doubled_digits.append(str(int(card_num[i]) * 2))

        # Sum all the digits
        sum_digits = sum(map(int, doubled_digits))

        # Check if the sum is evenly divisible by 10
        return sum_digits % 10 == 0
```
Here is an example usage of the `Luhn` class:
```python
luhn = Luhn("4539 3195 0343 6467")
print(luhn.valid())  # Output: True

luhn = Luhn("8273 1232 7352 0569")
print(luhn.valid())  # Output: False
```
Note that the `Luhn` class takes a string as input, and returns a boolean indicating whether the card number is valid or not. The `valid` method first removes any spaces from the card number, then checks if the card number is valid by doubling every second digit, starting from the right, and summing all the digits. If the sum is evenly divisible by 10, the card number is valid.
---
