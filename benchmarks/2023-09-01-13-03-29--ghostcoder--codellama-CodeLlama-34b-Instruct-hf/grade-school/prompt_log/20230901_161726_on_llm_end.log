method: on_llm_end [2023-09-01 16:17:26]
llm_output: null
prompt:
 
[PYTHON]
class School:
    def __init__(self):
        self.roster = {}

    def add_student(self, name, grade):
        if grade not in self.roster:
            self.roster[grade] = []
        if name not in self.roster[grade]:
            self.roster[grade].append(name)
        else:
            return "Student already enrolled in grade"

    def roster(self):
        return self.roster

    def grade(self, grade_number):
        if grade_number not in self.roster:
            return []
        return sorted(self.roster[grade_number])

    def added(self):
        return sorted([student for grade in self.roster.values() for student in grade])
[/PYTHON]

Filepath: grade_school_test.py
```pyton
import unittest
from grade_school import School

class SchoolTest(unittest.TestCase):
    def test_add_student(self):
        school = School()
        school.add_student("Aimee", 2)
        self.assertEqual(school.roster, {"2": ["Aimee"]})
        school.add_student("James", 3)
        self.assertEqual(school.roster, {"2": ["Aimee"], "3": ["James"]})
        school.add_student("Blair", 2)
        self.assertEqual(school.roster, {"2": ["Aimee", "Blair"], "3": ["James"]})
        school.add_student("James", 2)
        self.assertEqual(school.roster, {"2": ["Aimee", "Blair"], "3": ["James"]})

    def test_roster(self):
        school = School()
        self.assertEqual(school.roster, {})
        school.add_student("Aimee", 2)
        self.assertEqual(school.roster, {"2": ["Aimee"]})
        school.add_student("James", 3)
        self.assertEqual(school.roster, {"2": ["Aimee"], "3": ["James"]})
        school.add_student("Blair", 2)
        self.assertEqual(school.roster, {"2": ["Aimee", "Blair"], "3": ["James"]})

    def test_grade(self):
        school = School()
        school.add_student("Aimee", 2)
        school.add_student("James", 3)
        school.add_student("Blair", 2)
        school.add_student("James", 2)
        self.assertEqual(school.grade(2), ["Aimee", "Blair"])
        self.assertEqual(school.grade(3), ["James"])

    def test_added(self):
        school = School()
        school.add_student("Aimee", 2)
        school.add_student("James", 3)
        school.add_student("Blair", 2)
        school.add_student("James", 2)
        self.assertEqual(school.added(), ["Aimee", "Blair", "James"])

if __name__ == "__main__":
    unittest.main()
[/PYTHON]

Filepath: grade_school_test.py
```pyton
import unittest
from grade_school import School

class SchoolTest(unittest.TestCase):
    def test_add_student(self):
        school = School()
        school.add_student("Aimee", 2)
        self.assertEqual(school.roster, {"2": ["Aimee"]})
        school.add_student("James", 3)
        self.assertEqual(school.roster, {"2": ["Aimee"], "3": ["James"]})
        school.add_student("Blair", 2)
        self.assertEqual(school.roster, {"2": ["Aimee", "Blair"], "3": ["James"]})
        school.add_student("James", 2)
        self.assertEqual(school.roster, {"2": ["Aimee", "B
---
