method: on_llm_end [2023-09-01 14:44:08]
llm_output: null
prompt:
 
[PYTHON]
import threading

class BankAccount:
    def __init__(self):
        self.balance = 0
        self.is_open = False
        self.lock = threading.Lock()

    def open(self):
        with self.lock:
            if self.is_open:
                raise ValueError('account already open')
            self.is_open = True

    def close(self):
        with self.lock:
            if not self.is_open:
                raise ValueError('account not open')
            self.is_open = False

    def deposit(self, amount):
        with self.lock:
            if not self.is_open:
                raise ValueError('account not open')
            if amount <= 0:
                raise ValueError('amount must be greater than 0')
            self.balance += amount

    def withdraw(self, amount):
        with self.lock:
            if not self.is_open:
                raise ValueError('account not open')
            if amount <= 0:
                raise ValueError('amount must be greater than 0')
            if amount > self.balance:
                raise ValueError('amount must be less than balance')
            self.balance -= amount

    def get_balance(self):
        with self.lock:
            if not self.is_open:
                raise ValueError('account not open')
            return self.balance
[/PYTHON]

---
