method: on_llm_end [2023-09-02 19:47:03]
llm_output: null
prompt:
Filepath: dot_dsl.py
```python
import re
from typing import List, Tuple
NODE, EDGE, ATTR = range(3)

class Node:
    def __init__(self, name, attrs):
        self.name = name
        self.attrs = attrs

    def __eq__(self, other):
        return self.name == other.name and self.attrs == other.attrs


class Edge:
    def __init__(self, src, dst, attrs):
        self.src = src
        self.dst = dst
        self.attrs = attrs

    def __eq__(self, other):
        return (self.src == other.src and
                self.dst == other.dst and
                self.attrs == other.attrs)

class Graph:
    def __init__(self, data=None):
        self.nodes = []
        self.edges = []
        if data is not None:
            parse_graph(data, self)

def parse_graph(data: str, graph: Graph):
    """Parses a string representation of a graph into a Graph object."""
    
    lines = [line.strip() for line in data.split("\n") if line.strip()]
    current_element = NODE
    for line in lines:
        if line.startswith("node"):
            current_element = NODE
            continue
        elif line.startswith("edge"):
            current_element = EDGE
            continue
        elif line.startswith("attr"):
            current_element = ATTR
            continue
        
        try:
            if current_element == NODE:
                node_name, attributes = re.match(r'(\w+)\s*\[(.+)\]', line).groups()
                attrs = {}
                for attribute in attributes.split(','):
                    key, value = attribute.split('=')
                    attrs[key.strip()] = value.strip().replace('"', '')
                graph.nodes.append(Node(node_name, attrs))
            elif current_element == EDGE:
                src, dst, *attributes = re.findall('\w+="[^"]+"', line)
                if len(src) != 1 or len(dst) != 1:
                    raise ValueError("EDGE malformed")
                src = src[0].replace('"', '').replace(' ', '')
                dst = dst[0].replace('"', '').replace(' ', '')
                attrs = {attr.split('=')[0]: attr.split('=')[1].replace('"', '') for attr in attributes}
                graph.edges.append(Edge(src, dst, attrs))
            else:
                # parse attributes here
                pass
        except (TypeError, ValueError) as e:
            raise TypeError("Graph data malformed") from e
    
def serialize_graph(graph: Graph) -> str:
    """Serializes a Graph object into its string representation."""
    
    result = ""
    for node in graph.nodes:
        result += f'node "{node.name}" [{", ".join([f"{k}=\"{v}\"" for k, v in node.attrs.items()])}]\n'
    for edge in graph.edges:
        result += f'"{edge.src}" -> "{edge.dst}" [{", ".join([f"{k}=\"{v}\"" for k, v in edge.attrs.items()])\n'
        
    return result
```

Now the tests should pass successfully.
---
