method: on_llm_start [2023-09-02 19:15:47]
serialized: {"lc": 1, "type": "not_implemented", "id": ["ghostcoder", "llm", "exllama", "Exllama"]}
prompt:
Act as a an automated AI with superior programming skills.
You can both update the existing files and add new ones if needed. 
When responding, answer with an through explanation of what you changed, and present the updated files. 
Please exclude files that have not been updated.   

When you update or add a new file you must follow the rules below:
* YOU MUST keep package names and comments.
* YOU MUST include all the original code in the updated files, even if it hasn't been altered.  
* YOU SHOULD avoid adding any comments to the new code sections you are proposing.

ALL files should be presented in the following format:
Filepath: path/to/file
```language
code 
```


### Instruction:
Filepath: react.py
```pyton

```

# Instructions

Implement a basic reactive system.

Reactive programming is a programming paradigm that focuses on how values are computed in terms of each other to allow a change to one value to automatically propagate to other values, like in a spreadsheet.

Implement a basic reactive system with cells with settable values ("input" cells) and cells with values computed in terms of other cells ("compute" cells).
Implement updates so that when an input value is changed, values propagate to reach a new stable system state.

In addition, compute cells should allow for registering change notification callbacks.
Call a cell’s callbacks when the cell’s value in a new stable state has changed from the previous stable state.

####

Use the above instructions to modify the supplied files: react.py
Keep and implement the existing function or class stubs, they will be called from unit tests.
Do not implement or change any unit tests.
Only use standard python libraries, don't suggest installing any packages.

### Response:
Filepath: react.py
```
class InputCell:
    def __init__(self, initial_value=None):
        self._value = initial_value
        self._callbacks = []

    @property
    def value(self):
        return self._value

    @value.setter
    def value(self, new_val):
        if self._value != new_val:
            self._value = new_val
            for cb in self._callbacks:
                cb()

    def add_callback(self, callback):
        self._callbacks.append(callback)

    def remove_callback(self, callback):
        self._callbacks.remove(callback)


class ComputeCell:
    def __init__(self, inputs, compute_function):
        self._inputs = inputs
        self._compute_function = compute_function
        self._value = None
        self._callbacks = []
        self._stale = True

        for input_cell in self._inputs:
            input_cell.add_callback(self._mark_as_stale)

    def _mark_as_stable(self):
        self._stale = False

    def _mark_as_stale(self):
        self._stale = True

    @property
    def value(self):
        if self._stale:
            values = [input_cell.value for input_cell in self._inputs]
            self._value = self._compute_function(*values)
            self._stale = False
            for callback in self._callbacks:
                callback()
        return self._value

    def add_callback(self, callback):
        self._callbacks.append(callback)

    def remove_callback(self, callback):
        self._callbacks.remove(callback)
    
```

### Instruction:
Filepath: react.py
```pyton
class InputCell:
    def __init__(self, initial_value=None):
        self._value = initial_value
        self._callbacks = []

    @property
    def value(self):
        return self._value

    @value.setter
    def value(self, new_val):
        if self._value != new_val:
            self._value = new_val
            for cb in self._callbacks:
                cb()

    def add_callback(self, callback):
        self._callbacks.append(callback)

    def remove_callback(self, callback):
        self._callbacks.remove(callback)


class ComputeCell:
    def __init__(self, inputs, compute_function):
        self._inputs = inputs
        self._compute_function = compute_function
        self._value = None
        self._callbacks = []
        self._stale = True

        for input_cell in self._inputs:
            input_cell.add_callback(self._mark_as_stale)

    def _mark_as_stable(self):
        self._stale = False

    def _mark_as_stale(self):
        self._stale = True

    @property
    def value(self):
        if self._stale:
            values = [input_cell.value for input_cell in self._inputs]
            self._value = self._compute_function(*values)
            self._stale = False
            for callback in self._callbacks:
                callback()
        return self._value

    def add_callback(self, callback):
        self._callbacks.append(callback)

    def remove_callback(self, callback):
        self._callbacks.remove(callback)
    
```

.EEEE.EEEEEE.E
====
ERROR: test_callback_cells_only_fire_on_change (react_test.ReactTest)
----
Traceback (most recent call last):
  File "react/react_test.py", line 105, in test_callback_cells_only_fire_on_change
    self.assertEqual(cb1_observer[-1], 222)
IndexError: list index out of range

====
ERROR: test_callbacks_can_be_added_and_removed (react_test.ReactTest)
----
Traceback (most recent call last):
  File "react/react_test.py", line 164, in test_callbacks_can_be_added_and_removed
    self.assertEqual(cb1_observer[-1], 32)
IndexError: list index out of range

====
ERROR: test_callbacks_can_fire_from_multiple_cells (react_test.ReactTest)
----
Traceback (most recent call last):
  File "react/react_test.py", line 144, in test_callbacks_can_fire_from_multiple_cells
    self.assertEqual(cb1_observer[-1], 11)
IndexError: list index out of range

====
ERROR: test_callbacks_do_not_report_already_reported_values (react_test.ReactTest)
----
Traceback (most recent call last):
  File "react/react_test.py", line 119, in test_callbacks_do_not_report_already_reported_values
    self.assertEqual(cb1_observer[-1], 3)
IndexError: list index out of range

====
ERROR: test_callbacks_should_only_be_called_once_even_if_multiple_dependencies_change (react_test.ReactTest)
----
Traceback (most recent call last):
  File "react/react_test.py", line 229, in test_callbacks_should_only_be_called_once_even_if_multiple_dependencies_change
    self.assertEqual(cb1_observer[-1], 10)
IndexError: list index out of range

====
ERROR: test_compute_cells_calculate_initial_value (react_test.ReactTest)
----
Traceback (most recent call last):
  File "react/react_test.py", line 32, in test_compute_cells_calculate_initial_value
    self.assertEqual(output.value, 2)
  File "react/react.py", line 45, in value
    self._value = self._compute_function(*values)
  File "react/react_test.py", line 30, in <lambda>
####

See the testing errors above.
The tests are correct.
Fix the code in react.py to resolve the errors.


### Response:


