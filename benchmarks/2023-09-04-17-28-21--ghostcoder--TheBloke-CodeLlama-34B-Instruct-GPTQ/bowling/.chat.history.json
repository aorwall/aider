[
  {
    "items": [
      {
        "type": "text",
        "text": "# Instructions\n\nScore a bowling game.\n\nBowling is a game where players roll a heavy ball to knock down pins arranged in a triangle.\nWrite code to keep track of the score of a game of bowling.\n\n## Scoring Bowling\n\nThe game consists of 10 frames.\nA frame is composed of one or two ball throws with 10 pins standing at frame initialization.\nThere are three cases for the tabulation of a frame.\n\n- An open frame is where a score of less than 10 is recorded for the frame.\n  In this case the score for the frame is the number of pins knocked down.\n\n- A spare is where all ten pins are knocked down by the second throw.\n  The total value of a spare is 10 plus the number of pins knocked down in their next throw.\n\n- A strike is where all ten pins are knocked down by the first throw.\n  The total value of a strike is 10 plus the number of pins knocked down in the next two throws.\n  If a strike is immediately followed by a second strike, then the value of the first strike cannot be determined until the ball is thrown one more time.\n\nHere is a three frame example:\n\n| Frame 1         | Frame 2       | Frame 3                |\n| :-------------: |:-------------:| :---------------------:|\n| X (strike)      | 5/ (spare)    | 9 0 (open frame)       |\n\nFrame 1 is (10 + 5 + 5) = 20\n\nFrame 2 is (5 + 5 + 9) = 19\n\nFrame 3 is (9 + 0) = 9\n\nThis means the current running total is 48.\n\nThe tenth frame in the game is a special case.\nIf someone throws a spare or a strike then they get one or two fill balls respectively.\nFill balls exist to calculate the total of the 10th frame.\nScoring a strike or spare on the fill ball does not give the player more fill balls.\nThe total value of the 10th frame is the total number of pins knocked down.\n\nFor a tenth frame of X1/ (strike and a spare), the total value is 20.\n\nFor a tenth frame of XXX (three strikes), the total value is 30.\n\n## Requirements\n\nWrite code to keep track of the score of a game of bowling.\nIt should support two operations:\n\n- `roll(pins : int)` is called each time the player rolls a ball.\n  The argument is the number of pins knocked down.\n- `score() : int` is called only at the very end of the game.\n  It returns the total score for that game.\n# Instructions append\n\n## Exception messages\n\nSometimes it is necessary to [raise an exception](https://docs.python.org/3/tutorial/errors.html#raising-exceptions). When you do this, you should always include a **meaningful error message** to indicate what the source of the error is. This makes your code more readable and helps significantly with debugging. For situations where you know that the error source will be a certain type, you can choose to raise one of the [built in error types](https://docs.python.org/3/library/exceptions.html#base-classes), but should still include a meaningful message.\n\nThis particular exercise requires that you use the [raise statement](https://docs.python.org/3/reference/simple_stmts.html#the-raise-statement) to \"throw\" an error when the scoring or playing rules are not followed. The tests will only pass if you both `raise` the `exception` and include a message with it.\n\nTo raise a `ValueError` with a message, write the message as an argument to the `exception` type:\n\n```python\n# example when a bonus is attempted with an open frame\nraise IndexError(\"cannot throw bonus with an open tenth frame\")\n\n# example when fill balls are invalid\nraise ValueError(\"invalid fill balls\")\n```\n\n####\n\nUse the above instructions to modify the supplied files: bowling.py\nKeep and implement the existing function or class stubs, they will be called from existing unit tests.\nOnly use standard python libraries, don't suggest installing any packages.\n",
        "need_input": false
      },
      {
        "type": "file",
        "content": "",
        "language": "python",
        "file_path": "bowling.py",
        "readonly": false
      }
    ],
    "sender": "Human",
    "summary": null,
    "stats": null,
    "commit_id": null,
    "discarded": false
  },
  {
    "items": [
      {
        "type": "text",
        "text": "Filepath: bowling.py\n```python\nclass BowlingGame:\n    def __init__(self):\n        self._bonus_points = {\n            'X': {'first': 10, 'second': 20},\n            '/': {'first': 10}\n        }\n        self._fill_balls = ['X', '-']\n        self._frames = []\n        self._current_frame = None\n        self._total_score = 0\n\n    @property\n    def _is_last_frame(self):\n        return len(self._frames) == 9\n\n    @property\n    def _is_strike(self):\n        return self._current_frame['result'] == 'X'\n\n    @property\n    def _is_spare(self):\n        return self._current_frame['result'] == '/'\n\n    @property\n    def _can_have_bonus(self):\n        return self._current_frame['result'] != ''\n\n    @property\n    def _has_extra_ball(self):\n        return len(self._frames[-1]) > 2\n\n    def _add_to_score(self, points):\n        self._total_score += points\n\n    def _get_bonus_points(self, index=None):\n        if index is None:\n            index = -1\n        result = self._frames[index]['result']\n        try:\n            return self._bonus_points[result][self._frames[index].get('bonus')]\n        except KeyError:\n            return 0\n\n    def _update_bonus(self, index=-1):\n        if self._is_strike:\n            self._frames[index]['bonus'] = 'first'\n        elif self._is_spare:\n            self._frames[index]['bonus'] = 'first'\n            self._frames[index+1]['bonus'] = 'second'\n\n    def _calculate_score(self):\n        for i, frame in enumerate(self._frames[:-1], start=1):\n            if frame['result'] == 'X':\n                self._add_to_score(10 + self._get_bonus_points())\n            else:\n                self._add_to_score(sum([int(x) for x in list(frame['result'])]) + self._get_bonus_points(i))\n\n        last_frame = self._frames[-1]\n        if last_frame['result'] == 'X':\n            self._add_to_score(10 + self._get_bonus_points(-1))\n        elif last_frame['result'] == '/':\n            self._add_to_score(10 + self._get_bonus_points(-1))\n        else:\n            self._add_to_score(sum([int(x) for x in list(last_frame['result'])]))\n\n    def roll(self, pins):\n        if pins < 0:\n            raise ValueError(\"Negative roll is invalid\")\n        if pins > 10:\n            raise ValueError(\"Pin count exceeds pins on the lane\")\n\n        if self._current_frame is None:\n            self._current_frame = {}\n            self._current_frame['result'] = str(pins)\n            self._frames.append(self._current_frame)\n        else:\n            if self._is_last_frame and self._has_extra_ball:\n                raise ValueError(\"Cannot play more than 10 frames\")\n\n            if self._is_strike:\n                self._current_frame['bonus'] = 'first'\n                self._current_frame['result'] = str(pins)\n                self._frames.append(self._current_frame)\n                self._current_frame = {}\n            elif self._is_spare:\n                self._current_frame['bonus'] = 'second'\n                self._current_frame['result'] = str(pins)\n                self._frames.append(self._current_frame)\n                self._current_frame = {}\n            else:\n                self._current_frame['result'] += str(pins)\n\n            if len(list(self._current_frame['result'])) >= 2:\n                self._update_bonus()\n\n    def score(self):\n        if len(self._frames) < 10:\n            raise ValueError(\"Score cannot be taken```",
        "need_input": false
      }
    ],
    "sender": "AI",
    "summary": null,
    "stats": null,
    "commit_id": null,
    "discarded": false
  },
  {
    "items": [
      {
        "type": "text",
        "text": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\n====\nFAIL: test_a_roll_cannot_score_more_than_10_points (bowling_test.BowlingTest.test_a_roll_cannot_score_more_than_10_points)\n----\nTraceback (most recent call last):\n  File \"/home/albert/repos/albert/aider/bowling/bowling_test.py\", line 109, in test_a_roll_cannot_score_more_than_10_points\n    with self.assertRaisesWithMessage(Exception):\nAssertionError: Exception not raised\n\n====\nFAIL: test_a_spare_followed_by_zeros_is_worth_ten_points (bowling_test.BowlingTest.test_a_spare_followed_by_zeros_is_worth_ten_points)\n----\nTraceback (most recent call last):\n  File \"/home/albert/repos/albert/aider/bowling/bowling_test.py\", line 32, in test_a_spare_followed_by_zeros_is_worth_ten_points\n    self.assertEqual(game.score(), 10)\nAssertionError: None != 10\n\n====\nFAIL: test_a_spare_in_the_last_frame_gets_a_one_roll_bonus_that_is_counted_once (bowling_test.BowlingTest.test_a_spare_in_the_last_frame_gets_a_one_roll_bonus_that_is_counted_once)\n----\nTraceback (most recent call last):\n  File \"/home/albert/repos/albert/aider/bowling/bowling_test.py\", line 47, in test_a_spare_in_the_last_frame_gets_a_one_roll_bonus_that_is_counted_once\n    self.assertEqual(game.score(), 17)\nAssertionError: None != 17\n\n====\nFAIL: test_a_strike_earns_ten_points_in_a_frame_with_a_single_roll (bowling_test.BowlingTest.test_a_strike_earns_ten_points_in_a_frame_with_a_single_roll)\n----\nTraceback (most recent call last):\n  File \"/home/albert/repos/albert/aider/bowling/bowling_test.py\", line 52, in test_a_strike_earns_ten_points_in_a_frame_with_a_single_roll\n    self.assertEqual(game.score(), 10)\nAssertionError: None != 10\n\n====\nFAIL: test_a_strike_in_the_last_frame_gets_a_two_roll_bonus_that_is_counted_once (bowling_test.BowlingTest.test_a_strike_in_the_last_frame_gets_a_two_roll_bonus_that_is_counted_once)\n----\nTraceback (most recent call last):\n  File \"/home/albert/repos/albert/aider/bowling/bowling_test.py\", line 71, in test_a_strike_in_the_last_frame_gets_a_two_roll_bonus_that_is_counted_once\n    self.assertEqual(game.score(), 18)\nAssertionError: None != 18\n\n====\nFAIL: test_a_strike_with_the_one_roll_bonus_after_a_spare_in_the_last_frame_does_not_get_a_bonus (bowling_test.BowlingTest.test_a_strike_with_the_one_roll_bonus_after_a_spare_in_the_last_frame_does_not_get_a_bonus)\n----\nTraceback (most recent call last):\n  File \"/home/albert/repos/albert/aider/bowling/bowling_test.py\", line 93, in test_a_strike_with_the_one_roll_bonus_after_a_spare_in_the_last_frame_does_not_get_a_bonus\n    self.assertEqual(game.score(), 20)\nAssertionError: None != 20\n\n====\n####\n\nSee the testing errors above.\nThe tests are correct.\nFix the code in bowling.py to resolve the errors.\n",
        "need_input": false
      },
      {
        "type": "file",
        "content": "",
        "language": "python",
        "file_path": "bowling.py",
        "readonly": false
      }
    ],
    "sender": "Human",
    "summary": null,
    "stats": null,
    "commit_id": null,
    "discarded": false
  },
  {
    "items": [
      {
        "type": "updated_file",
        "content": "class BowlingGame:\n    def __init__(self):\n        self.rolls = []\n        self.current_roll = 0\n\n    def roll(self, pins):\n        self.rolls.append(pins)\n\n    def score(self):\n        score = 0\n        for frame in range(0, 10):\n            if self._is_strike(frame):\n                score += self._calculate_strike_score(frame)\n            elif self._is_spare(frame):\n                score += self._calculate_spare_score(frame)\n            else:\n                score += self._calculate_regular_score(frame)\n        return score\n\n    def _is_strike(self, frame_index):\n        return self.rolls[frame_index] == 10\n\n    def _is_spare(self, frame_index):\n        return self.rolls[frame_index] + self.rolls[frame_index + 1] == 10\n\n    def _calculate_strike_score(self, frame_index):\n        return 10 + self.rolls[frame_index + 1] + self.rolls[frame_index + 2]\n\n    def _calculate_spare_score(self, frame_index):\n        return 10 + self.rolls[frame_index + 2]\n\n    def _calculate_regular_score(self, frame_index):\n        return self.rolls[frame_index] + self.rolls[frame_index + 1]\n",
        "language": "python",
        "file_path": "bowling.py",
        "readonly": false,
        "error": null,
        "invalid": false
      }
    ],
    "sender": "AI",
    "summary": null,
    "stats": null,
    "commit_id": null,
    "discarded": false
  }
]