[
  {
    "items": [
      {
        "type": "text",
        "text": "# Instructions\n\nImplement a basic reactive system.\n\nReactive programming is a programming paradigm that focuses on how values are computed in terms of each other to allow a change to one value to automatically propagate to other values, like in a spreadsheet.\n\nImplement a basic reactive system with cells with settable values (\"input\" cells) and cells with values computed in terms of other cells (\"compute\" cells).\nImplement updates so that when an input value is changed, values propagate to reach a new stable system state.\n\nIn addition, compute cells should allow for registering change notification callbacks.\nCall a cell\u2019s callbacks when the cell\u2019s value in a new stable state has changed from the previous stable state.\n\n####\n\nUse the above instructions to modify the supplied files: react.py\nKeep and implement the existing function or class stubs, they will be called from existing unit tests.\nOnly use standard python libraries, don't suggest installing any packages.\n",
        "need_input": false
      },
      {
        "type": "file",
        "content": "",
        "language": "python",
        "file_path": "react.py",
        "readonly": false
      }
    ],
    "sender": "Human",
    "summary": null,
    "stats": null,
    "commit_id": null,
    "discarded": false
  },
  {
    "items": [
      {
        "type": "updated_file",
        "content": "import collections\n\nclass InputCell:\n    def __init__(self, initial_value):\n        self._value = initial_value\n        self._observers = []\n\n    @property\n    def value(self):\n        return self._value\n\n    @value.setter\n    def value(self, new_value):\n        self._value = new_value\n        self._notify()\n\n    def _notify(self):\n        for observer in self._observers:\n            observer()\n\n    def add_observer(self, observer):\n        self._observers.append(observer)\n\n    def remove_observer(self, observer):\n        self._observers.remove(observer)\n\n\nclass ComputeCell:\n    def __init__(self, inputs, compute_function):\n        self._inputs = inputs\n        self._compute_function = compute_function\n        self._value = None\n        self._observers = []\n        self._dependencies = {}\n\n        # Set up dependencies between inputs and this cell\n        for input_cell in self._inputs:\n            input_cell.add_observer(self._update)\n            self._dependencies[input_cell] = True\n\n    @property\n    def value(self):\n        return self._value\n\n    def _update(self):\n        old_value = self._value\n        self._value = self._compute_function(*[input_cell.value for input_cell in self._inputs])\n        if self._value != old_value:\n            self._notify()\n\n    def _notify(self):\n        for observer in self._observers:\n            observer()\n\n    def add_observer(self, observer):\n        self._observers.append(observer)\n\n    def remove_observer(self, observer):\n        self._observers.remove(observer)\n\n    def remove_dependency(self, dependency):\n        del self._dependencies[dependency]\n\n    def clear_dependencies(self):\n        self._dependencies = {}\n\n    def get_dependencies(self):\n        return list(self._dependencies.keys())\n\n    def __repr__(self):\n        return f\"ComputeCell({self._inputs}, {self._compute_function})\"\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n    ",
        "language": "python",
        "file_path": "react.py",
        "readonly": false,
        "error": null,
        "invalid": false
      }
    ],
    "sender": "AI",
    "summary": null,
    "stats": null,
    "commit_id": null,
    "discarded": false
  },
  {
    "items": [
      {
        "type": "text",
        "text": ".EEEEEEFFEFE.E\n====\nERROR: test_callback_cells_only_fire_on_change (react_test.ReactTest.test_callback_cells_only_fire_on_change)\n----\nTraceback (most recent call last):\n  File \"react/react_test.py\", line 101, in test_callback_cells_only_fire_on_change\n    output.add_callback(callback1)\n    ^^^^^^^^^^^^^^^^^^^\nAttributeError: 'ComputeCell' object has no attribute 'add_callback'\n\n====\nERROR: test_callbacks_can_be_added_and_removed (react_test.ReactTest.test_callbacks_can_be_added_and_removed)\n----\nTraceback (most recent call last):\n  File \"react/react_test.py\", line 161, in test_callbacks_can_be_added_and_removed\n    output.add_callback(callback1)\n    ^^^^^^^^^^^^^^^^^^^\nAttributeError: 'ComputeCell' object has no attribute 'add_callback'\n\n====\nERROR: test_callbacks_can_fire_from_multiple_cells (react_test.ReactTest.test_callbacks_can_fire_from_multiple_cells)\n----\nTraceback (most recent call last):\n  File \"react/react_test.py\", line 141, in test_callbacks_can_fire_from_multiple_cells\n    plus_one.add_callback(callback1)\n    ^^^^^^^^^^^^^^^^^^^^^\nAttributeError: 'ComputeCell' object has no attribute 'add_callback'\n\n====\nERROR: test_callbacks_do_not_report_already_reported_values (react_test.ReactTest.test_callbacks_do_not_report_already_reported_values)\n----\nTraceback (most recent call last):\n  File \"react/react_test.py\", line 117, in test_callbacks_do_not_report_already_reported_values\n    output.add_callback(callback1)\n    ^^^^^^^^^^^^^^^^^^^\nAttributeError: 'ComputeCell' object has no attribute 'add_callback'\n\n====\nERROR: test_callbacks_should_not_be_called_if_dependencies_change_but_output_value_doesn_t_change (react_test.ReactTest.test_callbacks_should_not_be_called_if_dependencies_change_but_output_value_doesn_t_change)\n----\nTraceback (most recent call last):\n  File \"react/react_test.py\", line 256, in test_callbacks_should_not_be_called_if_dependencies_change_but_output_value_doesn_t_change\n    always_two.add_callback(callback1)\n    ^^^^^^^^^^^^^^^^^^^^^^^\nAttributeError: 'ComputeCell' object has no attribute 'add_callback'\n\n====\nERROR: test_callbacks_should_only_be_called_once_even_if_multiple_dependencies_change (react_test.ReactTest.test_callbacks_should_only_be_called_once_even_if_multiple_dependencies_change)\n----\nTraceback (most recent call last):\n####\n\nSee the testing errors above.\nThe tests are correct.\nFix the code in react.py to resolve the errors.\n",
        "need_input": false
      },
      {
        "type": "file",
        "content": "",
        "language": "python",
        "file_path": "react.py",
        "readonly": false
      }
    ],
    "sender": "Human",
    "summary": null,
    "stats": null,
    "commit_id": null,
    "discarded": false
  },
  {
    "items": [
      {
        "type": "updated_file",
        "content": "import collections\n\nclass InputCell:\n    def __init__(self, initial_value):\n        self._value = initial_value\n        self._observers = []\n\n    @property\n    def value(self):\n        return self._value\n\n    @value.setter\n    def value(self, new_value):\n        self._value = new_value\n        self._notify()\n\n    def _notify(self):\n        for observer in self._observers:\n            observer()\n\n    def add_observer(self, observer):\n        self._observers.append(observer)\n\n    def remove_observer(self, observer):\n        self._observers.remove(observer)\n\n\nclass ComputeCell:\n    def __init__(self, inputs, compute_function):\n        self._inputs = inputs\n        self._compute_function = compute_function\n        self._value = None\n        self._observers = []\n        self._dependencies = set()\n\n        # Set up dependencies between inputs and this cell\n        for input_cell in self._inputs:\n            input_cell.add_observer(self._update)\n            self._dependencies.add(input_cell)\n\n    @property\n    def value(self):\n        return self._value\n\n    def _update(self):\n        old_value = self._value\n        self._value = self._compute_function(*[input_cell.value for input_cell in self._inputs])\n        if self._value != old_value:\n            self._notify()\n\n    def _notify(self):\n        for observer in self._observers:\n            observer()\n\n    def add_observer(self, observer):\n        self._observers.append(observer)\n\n    def remove_observer(self, observer):\n        self._observers.remove(observer)\n\n    def remove_dependency(self, dependency):\n        self._dependencies.discard(dependency)\n\n    def clear_dependencies(self):\n        self._dependencies = set()\n\n    def get_dependencies(self):\n        return list(self._dependencies)\n\n    def __repr__(self):\n        return f\"ComputeCell({self._inputs}, {self._compute_function})\"\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n    ",
        "language": "python",
        "file_path": "react.py",
        "readonly": false,
        "error": null,
        "invalid": false
      }
    ],
    "sender": "AI",
    "summary": null,
    "stats": null,
    "commit_id": null,
    "discarded": false
  }
]