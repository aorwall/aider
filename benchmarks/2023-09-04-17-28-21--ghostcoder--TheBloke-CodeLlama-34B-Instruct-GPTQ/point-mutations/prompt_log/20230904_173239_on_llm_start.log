method: on_llm_start [2023-09-04 17:32:39]
serialized: {"lc": 1, "type": "not_implemented", "id": ["langchain", "llms", "textgen", "TextGen"]}
prompt:
<s>[INST]<<SYS>>
Act as a an automated AI with superior programming skills.
You can both update the existing files and add new ones if needed. 
When responding, answer with an through explanation of what you changed, and present the updated files. 
Please exclude files that have not been updated.   

When you update or add a new file you must follow the rules below:
* YOU MUST keep package names and comments.
* YOU MUST include all the original code in the updated files, even if it hasn't been altered.  
* YOU SHOULD avoid adding any comments to the new code sections you are proposing.

ALL files should be presented in the following format:
Filepath: path/to/file
```language
code 
```

[INST]Update the function factorial to calculate the factorial of a given integer.
Filepath: factorial.py
```python
def factorial(n):
    pass
```
[/INST] Filepath: factorial.py
```python
def factorial(n):
    result = 1
    for i in range(2, n + 1):
        result *= i
    return result
```
Create a function named is_palindrome that checks if a given string is a palindrome.
Filepath: palindrome_checker.py
```python
def is_palindrome(s):
    pass
```
[/INST] Filepath: palindrome_checker.py
```python
def is_palindrome(s):
    s = s.lower().replace(" ", "")
    return s == s[::-1]
```
Add a new method named area to the class Rectangle that calculates and returns the area of the rectangle.
Filepath: shapes.py
```python
class Rectangle:
    def __init__(self, length, width):
        self.length = length
        self.width = width
```
[/INST] Filepath: shapes.py
```python
class Rectangle:
    def __init__(self, length, width):
        self.length = length
        self.width = width

    def area(self):
        return self.length * self.width
```

<</SYS>>
# Instructions

Calculate the Hamming difference between two DNA strands.

A mutation is simply a mistake that occurs during the creation or
copying of a nucleic acid, in particular DNA. Because nucleic acids are
vital to cellular functions, mutations tend to cause a ripple effect
throughout the cell. Although mutations are technically mistakes, a very
rare mutation may equip the cell with a beneficial attribute. In fact,
the macro effects of evolution are attributable by the accumulated
result of beneficial microscopic mutations over many generations.

The simplest and most common type of nucleic acid mutation is a point
mutation, which replaces one base with another at a single nucleotide.

By counting the number of differences between two homologous DNA strands
taken from different genomes with a common ancestor, we get a measure of
the minimum number of point mutations that could have occurred on the
evolutionary path between the two strands.

This is called the 'Hamming distance'

    GAGCCTACTAACGGGAT
    CATCGTAATGACGGCCT
    ^ ^ ^  ^ ^    ^^

The Hamming distance between these two DNA strands is 7.

## Implementation notes

The Hamming distance is only defined for sequences of equal length. Hence you
may assume that only sequences of equal length will be passed to your hamming
distance function.

**Note: This problem is deprecated, replaced by the one called `hamming`.**

####

Use the above instructions to modify the supplied files: point_mutations.py
Keep and implement the existing function or class stubs, they will be called from existing unit tests.
Only use standard python libraries, don't suggest installing any packages.

Filepath: point_mutations.py
```python
def hamming_distance(dna_strand_1, dna_strand_2):
    pass

```
[/INST]Filepath: point_mutations.py
```python


