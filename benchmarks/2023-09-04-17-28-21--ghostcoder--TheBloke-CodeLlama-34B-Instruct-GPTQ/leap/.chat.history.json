[
  {
    "items": [
      {
        "type": "text",
        "text": "# Instructions\n\nGiven a year, report if it is a leap year.\n\nThe tricky thing here is that a leap year in the Gregorian calendar occurs:\n\n```text\non every year that is evenly divisible by 4\n  except every year that is evenly divisible by 100\n    unless the year is also evenly divisible by 400\n```\n\nFor example, 1997 is not a leap year, but 1996 is.\n1900 is not a leap year, but 2000 is.\n\n## Notes\n\nThough our exercise adopts some very simple rules, there is more to learn!\n\nFor a delightful, four minute explanation of the whole leap year phenomenon, go watch [this youtube video][video].\n\n[video]: https://www.youtube.com/watch?v=xX96xng7sAE\n\n####\n\nUse the above instructions to modify the supplied files: leap.py\nKeep and implement the existing function or class stubs, they will be called from existing unit tests.\nOnly use standard python libraries, don't suggest installing any packages.\n",
        "need_input": false
      },
      {
        "type": "file",
        "content": "",
        "language": "python",
        "file_path": "leap.py",
        "readonly": false
      }
    ],
    "sender": "Human",
    "summary": null,
    "stats": null,
    "commit_id": null,
    "discarded": false
  },
  {
    "items": [
      {
        "type": "updated_file",
        "content": "def leap_year(year):\n    \"\"\"Return True if year is a leap year, False otherwise.\"\"\"\n    # Check if year is divisible by 4\n    if year % 4 != 0:\n        return False\n    # Check if year is divisible by 100\n    elif year % 100 != 0:\n        return True\n    # Check if year is divisible by 400\n    elif year % 400 != 0:\n        return False\n    else:\n        return True\n",
        "language": "python",
        "file_path": "leap.py",
        "readonly": false,
        "error": null,
        "invalid": false
      }
    ],
    "sender": "AI",
    "summary": null,
    "stats": null,
    "commit_id": null,
    "discarded": false
  }
]