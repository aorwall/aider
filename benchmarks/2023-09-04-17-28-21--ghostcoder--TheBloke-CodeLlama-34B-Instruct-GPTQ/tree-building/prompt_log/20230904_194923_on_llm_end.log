method: on_llm_end [2023-09-04 19:49:23]
llm_output: null
prompt:
from typing import List

class Record:
    def __init__(self, record_id, parent_id):
        self.record_id = record_id
        self.parent_id = parent_id


class Node:
    def __init__(self, node_id):
        self.node_id = node_id
        self.children = []


def build_tree(records: List[Record]) -> Node:
    """Build a tree from a list of records."""
    # Sort the records by their IDs
    sorted_records = sorted(records, key=lambda r: r.record_id)

    # Create a dictionary to map each record to its corresponding node
    nodes = {r.record_id: Node(r.record_id) for r in sorted_records}

    # Set up the root node
    root = nodes[sorted_records[0].record_id]

    # Iterate over the records and create the tree structure
    for record in sorted_records:
        # Find the parent node for the current record
        parent = nodes[record.parent_id]

        # Add the current node as a child of the parent node
        parent.children.append(nodes[record.record_id])

    return root


---
