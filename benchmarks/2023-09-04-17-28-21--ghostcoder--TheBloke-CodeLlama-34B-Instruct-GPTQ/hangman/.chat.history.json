[
  {
    "items": [
      {
        "type": "text",
        "text": "# Instructions\n\nImplement the logic of the hangman game using functional reactive programming.\n\n[Hangman][hangman] is a simple word guessing game.\n\n[Functional Reactive Programming][frp] is a way to write interactive programs.\nIt differs from the usual perspective in that instead of saying \"when the button is pressed increment the counter\", you write \"the value of the counter is the sum of the number of times the button is pressed.\"\n\nImplement the basic logic behind hangman using functional reactive programming.\nYou'll need to install an FRP library for this, this will be described in the language/track specific files of the exercise.\n\n[hangman]: https://en.wikipedia.org/wiki/Hangman_%28game%29\n[frp]: https://en.wikipedia.org/wiki/Functional_reactive_programming\n# Instructions append\n\n## Python Special Instructions\n\nA third party library **is not required** for this exercise.  Please ignore the instructions regarding **FRP library**.\n\n\n## Exception messages\n\nSometimes it is necessary to [raise an exception](https://docs.python.org/3/tutorial/errors.html#raising-exceptions). When you do this, you should always include a **meaningful error message** to indicate what the source of the error is. This makes your code more readable and helps significantly with debugging. For situations where you know that the error source will be a certain type, you can choose to raise one of the [built in error types](https://docs.python.org/3/library/exceptions.html#base-classes), but should still include a meaningful message.\n\nThis particular exercise requires that you use the [raise statement](https://docs.python.org/3/reference/simple_stmts.html#the-raise-statement) to \"throw\" a `ValueError` when the game has ended but the player tries to continue playing. The tests will only pass if you both `raise` the `exception` and include a message with it.\n\nTo raise a `ValueError` with a message, write the message as an argument to the `exception` type:\n\n```python\n# when player tries to play, but the game is already over.\nraise ValueError(\"The game has already ended.\")\n```\n\n####\n\nUse the above instructions to modify the supplied files: hangman.py\nKeep and implement the existing function or class stubs, they will be called from existing unit tests.\nOnly use standard python libraries, don't suggest installing any packages.\n",
        "need_input": false
      },
      {
        "type": "file",
        "content": "",
        "language": "python",
        "file_path": "hangman.py",
        "readonly": false
      }
    ],
    "sender": "Human",
    "summary": null,
    "stats": null,
    "commit_id": null,
    "discarded": false
  },
  {
    "items": [
      {
        "type": "updated_file",
        "content": "import re\nfrom typing import List\n\n\n# Game status categories\n# Change the values as you see fit\nSTATUS_WIN = 'win'\nSTATUS_LOSE = 'lose'\nSTATUS_ONGOING = 'ongoing'\n\n\nclass Hangman:\n    def __init__(self, word: str):\n        \"\"\"Initializes the game state\"\"\"\n        # Initialize private attributes\n        self._word: str = word\n        self._masked_word: List[str] = list('*' * len(word))\n        self._remaining_guesses: int = 9\n        self._status: str = STATUS_ONGOING\n\n        # Sanity check\n        assert all(c.isalpha() for c in word), f'\"{word}\" must contain only letters.'\n\n    @property\n    def remaining_guesses(self) -> int:\n        \"\"\"Returns the number of remaining guesses\"\"\"\n        return self._remaining_guesses\n\n    @property\n    def masked_word(self) -> List[str]:\n        \"\"\"Returns the current masked word\"\"\"\n        return self._masked_word\n\n    @property\n    def status(self) -> str:\n        \"\"\"Returns the current game status\"\"\"\n        return self._status\n\n    def _update_state(self, char: str) -> None:\n        \"\"\"Updates the internal state based on the provided character\"\"\"\n        # Check if the game has already been won or lost\n        if self._status != STATUS_ONGOING:\n            raise ValueError(f'Game has already {self._status}.')\n\n        # Update the masked word\n        matches = [(i, c) for i, c in enumerate(self._word) if c == char]\n        for i, _ in matches:\n            self._masked_word[i] = char\n\n        # Check if the user has won\n        if all(c != '*' for c in self._masked_word):\n            self._status = STATUS_WIN\n\n        # Decrement the number of remaining guesses\n        self._remaining_guesses -= 1\n\n        # Check if the user has lost\n        if self._remaining_guesses <= 0:\n            self._status = STATUS_LOSE\n\n    def guess(self, char: str) -> None:\n        \"\"\"Processes a guess by the user\"\"\"\n        # Validate input\n        if not char.isalpha():\n            raise ValueError(f'\"{char}\" must be a letter.')\n\n        # Update the internal state\n        self._update_state(char)\n\n    def get_masked_word(self) -> List[str]:\n        \"\"\"Returns the current masked word\"\"\"\n        return self._masked_word\n\n    def get_status(self) -> str:\n        \"\"\"Returns the current game status\"\"\"\n        return self._status\n\n\nif __name__ == '__main__':\n    # Test the implementation\n    secret_word = 'apple'\n    game = Hangman(secret_word)\n\n    print(f'Secret word: {secret_word}')\n    while True:\n        try:\n            guess = input('Guess a letter: ')\n            game.guess(guess)\n            print(f'Masked word: {\"\".join(game.get_masked_word())}')\n            print(f'Remaining guesses: {game.remaining_guesses}')\n            if game.status != STATUS_ONGOING:\n                break\n        except ValueError as e:\n            print(e)\n\n    print(f'Status: {game.status}')\n",
        "language": "python",
        "file_path": "hangman.py",
        "readonly": false,
        "error": null,
        "invalid": false
      }
    ],
    "sender": "AI",
    "summary": null,
    "stats": null,
    "commit_id": null,
    "discarded": false
  },
  {
    "items": [
      {
        "type": "text",
        "text": "EFFF.FE\n====\nERROR: test_after_10_failures_the_game_is_over (hangman_test.HangmanTests.test_after_10_failures_the_game_is_over)\n----\nTraceback (most recent call last):\n  File \"hangman/hangman_test.py\", line 24, in test_after_10_failures_the_game_is_over\n    game.guess('x')\n  File \"hangman/hangman.py\", line 68, in guess\n    self._update_state(char)\n  File \"hangman/hangman.py\", line 43, in _update_state\n    raise ValueError(f'Game has already {self._status}.')\nValueError: Game has already lose.\n\n====\nERROR: test_winning_on_last_guess_still_counts_as_a_win (hangman_test.HangmanTests.test_winning_on_last_guess_still_counts_as_a_win)\n----\nTraceback (most recent call last):\n  File \"hangman/hangman_test.py\", line 94, in test_winning_on_last_guess_still_counts_as_a_win\n    game.guess('a')\n  File \"hangman/hangman.py\", line 68, in guess\n    self._update_state(char)\n  File \"hangman/hangman.py\", line 43, in _update_state\n    raise ValueError(f'Game has already {self._status}.')\nValueError: Game has already lose.\n\n====\nFAIL: test_feeding_a_correct_letter_removes_underscores (hangman_test.HangmanTests.test_feeding_a_correct_letter_removes_underscores)\n----\nTraceback (most recent call last):\n  File \"hangman/hangman_test.py\", line 37, in test_feeding_a_correct_letter_removes_underscores\n    self.assertEqual(game.remaining_guesses, 9)\nAssertionError: 8 != 9\n\n====\nFAIL: test_feeding_a_correct_letter_twice_counts_as_a_failure (hangman_test.HangmanTests.test_feeding_a_correct_letter_twice_counts_as_a_failure)\n----\nTraceback (most recent call last):\n  File \"hangman/hangman_test.py\", line 50, in test_feeding_a_correct_letter_twice_counts_as_a_failure\n    self.assertEqual(game.remaining_guesses, 9)\nAssertionError: 8 != 9\n\n====\nFAIL: test_getting_all_the_letters_right_makes_for_a_win (hangman_test.HangmanTests.test_getting_all_the_letters_right_makes_for_a_win)\n----\nTraceback (most recent call last):\n  File \"hangman/hangman_test.py\", line 64, in test_getting_all_the_letters_right_makes_for_a_win\n    self.assertEqual(game.get_masked_word(), '_____')\nAssertionError: ['*', '*', '*', '*', '*'] != '_____'\n\n====\n####\n\nSee the testing errors above.\nThe tests are correct.\nFix the code in hangman.py to resolve the errors.\n",
        "need_input": false
      },
      {
        "type": "file",
        "content": "",
        "language": "python",
        "file_path": "hangman.py",
        "readonly": false
      }
    ],
    "sender": "Human",
    "summary": null,
    "stats": null,
    "commit_id": null,
    "discarded": false
  },
  {
    "items": [
      {
        "type": "updated_file",
        "content": "import re\nfrom typing import List\n\n\n# Game status categories\n# Change the values as you see fit\nSTATUS_WIN = 'win'\nSTATUS_LOSE = 'lose'\nSTATUS_ONGOING = 'ongoing'\n\n\nclass Hangman:\n    def __init__(self, word: str):\n        \"\"\"Initializes the game state\"\"\"\n        # Initialize private attributes\n        self._word: str = word\n        self._masked_word: List[str] = list('*' * len(word))\n        self._remaining_guesses: int = 9\n        self._status: str = STATUS_ONGOING\n\n        # Sanity check\n        assert all(c.isalpha() for c in word), f'\"{word}\" must contain only letters.'\n\n    @property\n    def remaining_guesses(self) -> int:\n        \"\"\"Returns the number of remaining guesses\"\"\"\n        return self._remaining_guesses\n\n    @property\n    def masked_word(self) -> List[str]:\n        \"\"\"Returns the current masked word\"\"\"\n        return self._masked_word\n\n    @property\n    def status(self) -> str:\n        \"\"\"Returns the current game status\"\"\"\n        return self._status\n\n    def _update_state(self, char: str) -> None:\n        \"\"\"Updates the internal state based on the provided character\"\"\"\n        # Check if the game has already been won or lost\n        if self._status != STATUS_ONGOING:\n            raise ValueError(f'Game has already {self._status}.')\n\n        # Update the masked word\n        matches = [(i, c) for i, c in enumerate(self._word) if c == char]\n        for i, _ in matches:\n            self._masked_word[i] = char\n\n        # Check if the user has won\n        if all(c != '*' for c in self._masked_word):\n            self._status = STATUS_WIN\n\n        # Decrement the number of remaining guesses\n        self._remaining_guesses -= 1\n\n        # Check if the user has lost\n        if self._remaining_guesses <= 0:\n            self._status = STATUS_LOSE\n\n    def guess(self, char: str) -> None:\n        \"\"\"Processes a guess by the user\"\"\"\n        # Validate input\n        if not char.isalpha():\n            raise ValueError(f'\"{char}\" must be a letter.')\n\n        # Update the internal state\n        self._update_state(char)\n\n    def get_masked_word(self) -> List[str]:\n        \"\"\"Returns the current masked word\"\"\"\n        return self._masked_word\n\n    def get_status(self) -> str:\n        \"\"\"Returns the current game status\"\"\"\n        return self._status\n\n\nif __name__ == '__main__':\n    # Test the implementation\n    secret_word = 'apple'\n    game = Hangman(secret_word)\n\n    print(f'Secret word: {secret_word}')\n    while True:\n        try:\n            guess = input('Guess a letter: ')\n            game.guess(guess)\n            print(f'Masked word: {\"\".join(game.get_masked_word())}')\n            print(f'Remaining guesses: {game.remaining_guesses}')\n            if game.status != STATUS_ONGOING:\n                break\n        except ValueError as e:\n            print(e)\n\n    print(f'Status: {game.status}')\n",
        "language": "python",
        "file_path": "hangman.py",
        "readonly": false,
        "error": null,
        "invalid": true
      }
    ],
    "sender": "AI",
    "summary": null,
    "stats": null,
    "commit_id": null,
    "discarded": false
  }
]