method: on_llm_end [2023-08-20 18:37:26]
llm_output: {"token_usage": {"prompt_tokens": 2455, "completion_tokens": 464, "total_tokens": 2919}, "model_name": "gpt-4"}
prompt:
The existing code is quite repetitive and could be simplified by extracting common functionality into separate functions. Here's a list of changes I made:

1. Created a function `format_date` to handle date formatting based on locale.
2. Created a function `format_description` to handle description formatting.
3. Created a function `format_change` to handle change formatting based on currency.
4. Simplified the `format_entries` function by using the new functions and removing redundant code.
5. Sorted entries by date, change, and description using Python's built-in `sorted` function instead of manually finding the minimum entry each time.

Here's the refactored code:

Filepath: ledger.py
```python
from datetime import datetime


class LedgerEntry:
    def __init__(self, date, description, change):
        self.date = datetime.strptime(date, '%Y-%m-%d')
        self.description = description
        self.change = change


def format_date(entry, locale):
    if locale == 'en_US':
        return entry.date.strftime('%m/%d/%Y')
    elif locale == 'nl_NL':
        return entry.date.strftime('%d-%m-%Y')


def format_description(entry):
    return entry.description[:22] + '...' if len(entry.description) > 25 else entry.description.ljust(25)


def format_change(entry, currency):
    change = abs(entry.change)
    change_str = f'{change // 100}.{change % 100:02d}'
    if currency == 'USD':
        change_str = f'${change_str}'
    elif currency == 'EUR':
        change_str = f'â‚¬{change_str}'
    return f'({change_str})' if entry.change < 0 else change_str.ljust(13)


def format_entries(currency, locale, entries):
    entries = sorted(entries, key=lambda e: (e.date, e.change, e.description))
    header = 'Date       | Description               | Change       ' if locale == 'en_US' else 'Datum      | Omschrijving              | Verandering  '
    return header + '\n'.join([f'{format_date(e, locale)} | {format_description(e)} | {format_change(e, currency)}' for e in entries])
```
---
