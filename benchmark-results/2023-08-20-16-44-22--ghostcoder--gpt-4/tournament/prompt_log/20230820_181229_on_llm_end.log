method: on_llm_end [2023-08-20 18:12:29]
llm_output: {"token_usage": {"prompt_tokens": 719, "completion_tokens": 665, "total_tokens": 1384}, "model_name": "gpt-4"}
prompt:
To solve this problem, we need to parse the input rows, update the statistics for each team, and then format the results into the desired output format. 

Here's how we can do it:

1. Create a dictionary to store the statistics for each team. The keys will be the team names, and the values will be another dictionary with keys for 'MP', 'W', 'D', 'L', and 'P'.

2. Iterate over the input rows. For each row, split the row into the two team names and the result. Update the statistics for the two teams based on the result.

3. After updating all the statistics, convert the dictionary into a list of tuples, where each tuple contains a team name and its statistics.

4. Sort the list of tuples first by points in descending order, and then by team name in ascending order.

5. Format the sorted list into the desired output format.

Here's the updated code:

Filepath: tournament.py
```python
def tally(rows):
    teams = {}

    for row in rows:
        team1, team2, result = row.split(';')

        if team1 not in teams:
            teams[team1] = {'MP': 0, 'W': 0, 'D': 0, 'L': 0, 'P': 0}
        if team2 not in teams:
            teams[team2] = {'MP': 0, 'W': 0, 'D': 0, 'L': 0, 'P': 0}

        teams[team1]['MP'] += 1
        teams[team2]['MP'] += 1

        if result == 'win':
            teams[team1]['W'] += 1
            teams[team1]['P'] += 3
            teams[team2]['L'] += 1
        elif result == 'loss':
            teams[team2]['W'] += 1
            teams[team2]['P'] += 3
            teams[team1]['L'] += 1
        else:  # draw
            teams[team1]['D'] += 1
            teams[team1]['P'] += 1
            teams[team2]['D'] += 1
            teams[team2]['P'] += 1

    sorted_teams = sorted(teams.items(), key=lambda x: (-x[1]['P'], x[0]))

    output = ['Team                           | MP |  W |  D |  L |  P']
    for team, stats in sorted_teams:
        output.append(f"{team:30} | {stats['MP']:2} | {stats['W']:2} | {stats['D']:2} | {stats['L']:2} | {stats['P']:2}")

    return '\n'.join(output)
```

This function first initializes an empty dictionary to store the statistics for each team. It then iterates over the input rows, updating the statistics for the two teams in each row based on the result of the match. After updating all the statistics, it sorts the teams by points and team name, and formats the sorted list into the desired output format.
---
