method: on_llm_end [2023-08-20 16:49:01]
llm_output: {"token_usage": {"prompt_tokens": 765, "completion_tokens": 320, "total_tokens": 1085}, "model_name": "gpt-4"}
prompt:
To convert a binary number to its decimal equivalent, we can iterate over the binary string from right to left (i.e., from least significant bit to most significant bit). For each bit, we multiply it by 2 raised to the power of its position (starting from 0) and add the result to a sum. 

Before we start the conversion, we should validate the input to ensure it's a valid binary string. A binary string should only contain '0's and '1's. If it contains any other character, we raise a ValueError with a meaningful message.

Here's the updated code:

Filepath: binary.py
```python
def parse_binary(binary_string):
    if not all(char in '01' for char in binary_string):
        raise ValueError("Invalid binary literal: " + binary_string)

    decimal = 0
    for i, bit in enumerate(binary_string[::-1]):
        decimal += int(bit) * (2 ** i)
    return decimal
```

In the updated code, the `all()` function is used to check if all characters in the binary_string are either '0' or '1'. If not, a ValueError is raised.

The `enumerate()` function is used to get both the index (i) and value (bit) of each character in the reversed binary_string. The index is used as the power to which 2 is raised, and the value is the bit that is multiplied by 2 raised to the power of its position. The result is added to the decimal sum. 

Finally, the decimal sum is returned.
---
