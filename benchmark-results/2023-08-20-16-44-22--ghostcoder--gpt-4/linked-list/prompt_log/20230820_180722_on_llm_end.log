method: on_llm_end [2023-08-20 18:07:22]
llm_output: {"token_usage": {"prompt_tokens": 1418, "completion_tokens": 773, "total_tokens": 2191}, "model_name": "gpt-4"}
prompt:
Sure, let's start by implementing the `Node` class. Each `Node` will have a `value` and two pointers: `succeeding` and `previous`. The `succeeding` pointer will point to the next node in the list, and the `previous` pointer will point to the previous node in the list.

Filepath: linked_list.py
```python
class Node:
    def __init__(self, value, succeeding=None, previous=None):
        self.value = value
        self.succeeding = succeeding
        self.previous = previous
```

Next, let's implement the `LinkedList` class. The `LinkedList` will have a `head` and a `tail` pointer, and a `length` to keep track of the number of nodes in the list. The `head` pointer will point to the first node in the list, and the `tail` pointer will point to the last node in the list.

In the `LinkedList` class, we'll implement the following methods:

- `push`: This method will add a node to the end of the list.
- `pop`: This method will remove a node from the end of the list.
- `shift`: This method will remove a node from the beginning of the list.
- `unshift`: This method will add a node to the beginning of the list.
- `delete`: This method will remove the first occurrence of a node with a given value from the list.
- `__len__`: This method will return the number of nodes in the list.
- `__iter__`: This method will return an iterator for the list.

Filepath: linked_list.py
```python
class LinkedList:
    def __init__(self):
        self.head = None
        self.tail = None
        self.length = 0

    def push(self, value):
        new_node = Node(value, None, self.tail)
        if self.tail:
            self.tail.succeeding = new_node
        else:
            self.head = new_node
        self.tail = new_node
        self.length += 1

    def pop(self):
        if not self.tail:
            raise IndexError("List is empty")
        value = self.tail.value
        self.tail = self.tail.previous
        if self.tail:
            self.tail.succeeding = None
        else:
            self.head = None
        self.length -= 1
        return value

    def shift(self):
        if not self.head:
            raise IndexError("List is empty")
        value = self.head.value
        self.head = self.head.succeeding
        if self.head:
            self.head.previous = None
        else:
            self.tail = None
        self.length -= 1
        return value

    def unshift(self, value):
        new_node = Node(value, self.head, None)
        if self.head:
            self.head.previous = new_node
        else:
            self.tail = new_node
        self.head = new_node
        self.length += 1

    def delete(self, value):
        node = self.head
        while node:
            if node.value == value:
                if node.previous:
                    node.previous.succeeding = node.succeeding
                else:
                    self.head = node.succeeding
                if node.succeeding:
                    node.succeeding.previous = node.previous
                else:
                    self.tail = node.previous
                self.length -= 1
                return
            node = node.succeeding
        raise ValueError("Value not found")

    def __len__(self):
        return self.length

    def __iter__(self):
        node = self.head
        while node:
            yield node.value
            node = node.succeeding
```
---
