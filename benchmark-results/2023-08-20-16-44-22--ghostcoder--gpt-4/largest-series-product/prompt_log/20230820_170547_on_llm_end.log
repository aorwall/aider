method: on_llm_end [2023-08-20 17:05:47]
llm_output: {"token_usage": {"prompt_tokens": 898, "completion_tokens": 294, "total_tokens": 1192}, "model_name": "gpt-4"}
prompt:
Sure, I can help with that. Here's how you can implement the `largest_product` function. 

We need to check for a few conditions first:

- If the size is negative, we raise a ValueError.
- If the size is greater than the length of the series, we raise a ValueError.
- If the series contains non-digit characters, we raise a ValueError.

Then, we iterate over the series, taking `size` number of characters at a time. We calculate the product of these characters and keep track of the maximum product we've found so far. 

Finally, we return the maximum product.

Filepath: largest_series_product.py
```python
def largest_product(series, size):
    if size < 0:
        raise ValueError("span must not be negative")
    if size > len(series):
        raise ValueError("span must be smaller than string length")
    if not series.isdigit():
        raise ValueError("digits input must only contain digits")

    max_product = 0
    for i in range(len(series) - size + 1):
        product = 1
        for digit in series[i:i+size]:
            product *= int(digit)
        max_product = max(max_product, product)
    return max_product
```
This function should work as expected according to the problem statement. It raises the appropriate exceptions when the input is invalid and calculates the largest product of a series of digits in the input string.
---
