method: on_llm_end [2023-08-20 17:38:52]
llm_output: {"token_usage": {"prompt_tokens": 1944, "completion_tokens": 541, "total_tokens": 2485}, "model_name": "gpt-4"}
prompt:
The issue seems to be with the calculation of the end point in the `search` method. Currently, it's calculated based on the length of the word and the starting point, assuming that the word is found in the right direction. However, the word can be found in any direction, so the end point should be calculated based on the direction in which the word is found.

I will modify the `search_from` method to return the end point if the word is found. Then, in the `search` method, I will return the start and end points returned by `search_from`.

Here is the updated code:

Filepath: word_search.py
```python
class Point:
    def __init__(self, x, y):
        self.x = x
        self.y = y

    def __eq__(self, other):
        return self.x == other.x and self.y == other.y


class WordSearch:
    def __init__(self, puzzle):
        self.puzzle = [list(row) for row in puzzle]

    def search(self, word):
        for y in range(len(self.puzzle)):
            for x in range(len(self.puzzle[y])):
                result = self.search_from(x, y, word)
                if result:
                    return Point(x, y), result
        return None

    def search_from(self, x, y, word):
        for dx, dy in [(0, 1), (1, 0), (1, 1), (-1, 0), (0, -1), (-1, -1), (1, -1), (-1, 1)]:
            end_point = self.search_in_direction(x, y, dx, dy, word)
            if end_point:
                return end_point
        return None

    def search_in_direction(self, x, y, dx, dy, word):
        for i in range(len(word)):
            nx, ny = x + i * dx, y + i * dy
            if not (0 <= nx < len(self.puzzle[0]) and 0 <= ny < len(self.puzzle)):
                return None
            if self.puzzle[ny][nx] != word[i]:
                return None
        return Point(nx, ny)
```
In the `search_from` method, I call `search_in_direction` for each direction and check if it returns an end point. If it does, I return that end point.

In the `search_in_direction` method, I return the end point if all characters match. If any character doesn't match or if I go out of bounds, I return `None`.
---
