method: on_llm_start [2023-08-20 19:13:14]
serialized: {"lc": 1, "type": "constructor", "id": ["langchain", "chat_models", "openai", "ChatOpenAI"], "kwargs": {"model": "gpt-3.5-turbo-16k", "temperature": 0.0, "openai_api_key": {"lc": 1, "type": "secret", "id": ["OPENAI_API_KEY"]}}}
prompt:
System: Act as a helpful Senior Developer helping a Human to write code. 

You can both update the existing files and add new ones if needed. 

When responding, answer with an through explanation of what you changed, and present the updated or added files. 
Please exclude files that have not been updated.   

* YOU MUST keep package names and comments.
* YOU MUST avoid adding any comments to the new code sections you are proposing.
* YOU MUST provide valid code 

When updating existing files:
* YOU MUST only print out updated or added lines. 
* YOU MUST replace unchanged lines with a comment. 
* YOU MUST include the definitions of parent classes and functions.

* ALL files should be presented in the following format:
Filepath: file_path
```languague
code
```

Human: # Instructions

Implement a basic reactive system.

Reactive programming is a programming paradigm that focuses on how values are computed in terms of each other to allow a change to one value to automatically propagate to other values, like in a spreadsheet.

Implement a basic reactive system with cells with settable values ("input" cells) and cells with values computed in terms of other cells ("compute" cells).
Implement updates so that when an input value is changed, values propagate to reach a new stable system state.

In addition, compute cells should allow for registering change notification callbacks.
Call a cell’s callbacks when the cell’s value in a new stable state has changed from the previous stable state.

####

Use the above instructions to modify the supplied files: react.py
Keep and implement the existing function or class stubs, they will be called from unit tests.
Only use standard python libraries, don't suggest installing any packages.

Filepath: react.py
AI: I updated a file.
Filepath: react.py
```python
class InputCell:
    def __init__(self, initial_value):
        self.value = initial_value
        self.callbacks = []

    def set_value(self, new_value):
        if new_value != self.value:
            self.value = new_value
            for callback in self.callbacks:
                callback(self.value)

    def add_callback(self, callback):
        self.callbacks.append(callback)

    def remove_callback(self, callback):
        self.callbacks.remove(callback)


class ComputeCell:
    def __init__(self, inputs, compute_function):
        self.inputs = inputs
        self.compute_function = compute_function
        self.value = self.compute_function([input_cell.value for input_cell in self.inputs])
        self.callbacks = []

        for input_cell in self.inputs:
            input_cell.add_callback(self.update_value)

    def update_value(self, new_value):
        old_value = self.value
        self.value = self.compute_function([input_cell.value for input_cell in self.inputs])
        if self.value != old_value:
            for callback in self.callbacks:
                callback(self.value)

    def add_callback(self, callback):
        self.callbacks.append(callback)

    def remove_callback(self, callback):
        self.callbacks.remove(callback)
```
Human: .EEEE.E.FE.F.E
====
ERROR: test_callback_cells_only_fire_on_change (react_test.ReactTest.test_callback_cells_only_fire_on_change)
----
Traceback (most recent call last):
  File "react/react_test.py", line 105, in test_callback_cells_only_fire_on_change
    self.assertEqual(cb1_observer[-1], 222)
                     ~~~~~~~~~~~~^^^^
IndexError: list index out of range

====
ERROR: test_callbacks_can_be_added_and_removed (react_test.ReactTest.test_callbacks_can_be_added_and_removed)
----
Traceback (most recent call last):
  File "react/react_test.py", line 164, in test_callbacks_can_be_added_and_removed
    self.assertEqual(cb1_observer[-1], 32)
                     ~~~~~~~~~~~~^^^^
IndexError: list index out of range

====
ERROR: test_callbacks_can_fire_from_multiple_cells (react_test.ReactTest.test_callbacks_can_fire_from_multiple_cells)
----
Traceback (most recent call last):
  File "react/react_test.py", line 144, in test_callbacks_can_fire_from_multiple_cells
    self.assertEqual(cb1_observer[-1], 11)
                     ~~~~~~~~~~~~^^^^
IndexError: list index out of range

====
ERROR: test_callbacks_do_not_report_already_reported_values (react_test.ReactTest.test_callbacks_do_not_report_already_reported_values)
----
Traceback (most recent call last):
  File "react/react_test.py", line 119, in test_callbacks_do_not_report_already_reported_values
    self.assertEqual(cb1_observer[-1], 3)
                     ~~~~~~~~~~~~^^^^
IndexError: list index out of range

====
ERROR: test_callbacks_should_only_be_called_once_even_if_multiple_dependencies_change (react_test.ReactTest.test_callbacks_should_only_be_called_once_even_if_multiple_dependencies_change)
----
Traceback (most recent call last):
  File "react/react_test.py", line 229, in test_callbacks_should_only_be_called_once_even_if_multiple_dependencies_change
    self.assertEqual(cb1_observer[-1], 10)
                     ~~~~~~~~~~~~^^^^
IndexError: list index out of range

====
ERROR: test_compute_cells_fire_callbacks (react_test.ReactTest.test_compute_cells_fire_callbacks)
----
Traceback (most recent call last):
####

See the testing errors above.
The tests are correct.
Fix the code in react.py to resolve the errors.

Filepath: react.py
```python
class InputCell:
    def __init__(self, initial_value):
        self.value = initial_value
        self.callbacks = []

    def set_value(self, new_value):
        if new_value != self.value:
            self.value = new_value
            for callback in self.callbacks:
                callback(self.value)

    def add_callback(self, callback):
        self.callbacks.append(callback)

    def remove_callback(self, callback):
        self.callbacks.remove(callback)


class ComputeCell:
    def __init__(self, inputs, compute_function):
        self.inputs = inputs
        self.compute_function = compute_function
        self.value = self.compute_function([input_cell.value for input_cell in self.inputs])
        self.callbacks = []

        for input_cell in self.inputs:
            input_cell.add_callback(self.update_value)

    def update_value(self, new_value):
        old_value = self.value
        self.value = self.compute_function([input_cell.value for input_cell in self.inputs])
        if self.value != old_value:
            for callback in self.callbacks:
                callback(self.value)

    def add_callback(self, callback):
        self.callbacks.append(callback)

    def remove_callback(self, callback):
        self.callbacks.remove(callback)
```

